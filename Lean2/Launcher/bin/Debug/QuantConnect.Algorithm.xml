<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuantConnect.Algorithm</name>
    </assembly>
    <members>
        <member name="T:QuantConnect.Algorithm.Framework.Alphas.AlphaModel">
            <summary>
            Provides a base class for alpha models.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.Framework.Alphas.AlphaModel.Name">
            <summary>
            Defines a name for a framework model
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.AlphaModel.Update(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.Slice)">
            <summary>
            Updates this alpha model with the latest data from the algorithm.
            This is called each time the algorithm receives data for subscribed securities
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="data">The new data available</param>
            <returns>The new insights generated</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.AlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Alphas.AlphaModelExtensions">
            <summary>
            Provides extension methods for alpha models
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.AlphaModelExtensions.GetModelName(QuantConnect.Algorithm.Framework.Alphas.IAlphaModel)">
            <summary>
            Gets the name of the alpha model
            </summary>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Alphas.AlphaModelPythonWrapper">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Alphas.IAlphaModel"/> that wraps a <see cref="T:Python.Runtime.PyObject"/> object
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.Framework.Alphas.AlphaModelPythonWrapper.Name">
            <summary>
            Defines a name for a framework model
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.AlphaModelPythonWrapper.#ctor(Python.Runtime.PyObject)">
            <summary>
            Constructor for initialising the <see cref="T:QuantConnect.Algorithm.Framework.Alphas.IAlphaModel"/> class with wrapped <see cref="T:Python.Runtime.PyObject"/> object
            </summary>
            <param name="model">>Model that generates alpha</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.AlphaModelPythonWrapper.Update(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.Slice)">
            <summary>
            Updates this alpha model with the latest data from the algorithm.
            This is called each time the algorithm receives data for subscribed securities
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="data">The new data available</param>
            <returns>The new insights generated</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.AlphaModelPythonWrapper.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Alphas.CompositeAlphaModel">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Alphas.IAlphaModel"/> that combines multiple alpha
            models into a single alpha model and properly sets each insights 'SourceModel' property.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.CompositeAlphaModel.#ctor(QuantConnect.Algorithm.Framework.Alphas.IAlphaModel[])">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Alphas.CompositeAlphaModel"/> class
            </summary>
            <param name="alphaModels">The individual alpha models defining this composite model</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.CompositeAlphaModel.#ctor(Python.Runtime.PyObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Alphas.CompositeAlphaModel"/> class
            </summary>
            <param name="alphaModels">The individual alpha models defining this composite model</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.CompositeAlphaModel.#ctor(Python.Runtime.PyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Alphas.CompositeAlphaModel"/> class
            </summary>
            <param name="alphaModel">The individual alpha model defining this composite model</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.CompositeAlphaModel.Update(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.Slice)">
            <summary>
            Updates this alpha model with the latest data from the algorithm.
            This is called each time the algorithm receives data for subscribed securities.
            This method patches this call through the each of the wrapped models.
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="data">The new data available</param>
            <returns>The new insights generated</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.CompositeAlphaModel.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed.
            This method patches this call through the each of the wrapped models.
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.CompositeAlphaModel.AddAlpha(QuantConnect.Algorithm.Framework.Alphas.IAlphaModel)">
            <summary>
            Adds a new <see cref="T:QuantConnect.Algorithm.Framework.Alphas.AlphaModel"/>
            </summary>
            <param name="alphaModel">The alpha model to add</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.CompositeAlphaModel.AddAlpha(Python.Runtime.PyObject)">
            <summary>
            Adds a new <see cref="T:QuantConnect.Algorithm.Framework.Alphas.AlphaModel"/>
            </summary>
            <param name="pyAlphaModel">The alpha model to add</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Alphas.IAlphaModel">
            <summary>
            Algorithm framework model that produces insights
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.IAlphaModel.Update(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.Slice)">
            <summary>
            Updates this alpha model with the latest data from the algorithm.
            This is called each time the algorithm receives data for subscribed securities
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="data">The new data available</param>
            <returns>The new insights generated</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Alphas.INamedModel">
            <summary>
            Provides a marker interface allowing models to define their own names.
            If not specified, the framework will use the model's type name.
            Implementation of this is not required unless you plan on running multiple models
            of the same type w/ different parameters.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.Framework.Alphas.INamedModel.Name">
            <summary>
            Defines a name for a framework model
            </summary>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Alphas.NullAlphaModel">
            <summary>
            Provides a null implementation of an alpha model
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Alphas.NullAlphaModel.Update(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.Slice)">
            <summary>
            Updates this alpha model with the latest data from the algorithm.
            This is called each time the algorithm receives data for subscribed securities
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="data">The new data available</param>
            <returns>The new insights generated</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Execution.ExecutionModel">
            <summary>
            Provides a base class for execution models
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Execution.ExecutionModel.Execute(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget[])">
            <summary>
            Submit orders for the specified portolio targets.
            This model is free to delay or spread out these orders as it sees fit
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="targets">The portfolio targets just emitted by the portfolio construction model.
            These are always just the new/updated targets and not a complete set of targets</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Execution.ExecutionModel.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Execution.ExecutionModelPythonWrapper">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Execution.IExecutionModel"/> that wraps a <see cref="T:Python.Runtime.PyObject"/> object
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Execution.ExecutionModelPythonWrapper.#ctor(Python.Runtime.PyObject)">
            <summary>
            Constructor for initialising the <see cref="T:QuantConnect.Algorithm.Framework.Execution.IExecutionModel"/> class with wrapped <see cref="T:Python.Runtime.PyObject"/> object
            </summary>
            <param name="model">Model defining how to execute trades to reach a portfolio target</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Execution.ExecutionModelPythonWrapper.Execute(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget[])">
            <summary>
            Submit orders for the specified portolio targets.
            This model is free to delay or spread out these orders as it sees fit
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="targets">The portfolio targets to be ordered</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Execution.ExecutionModelPythonWrapper.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Execution.IExecutionModel">
            <summary>
            Algorithm framework model that executes portfolio targets
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Execution.IExecutionModel.Execute(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget[])">
            <summary>
            Submit orders for the specified portfolio targets.
            This model is free to delay or spread out these orders as it sees fit
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="targets">The portfolio targets just emitted by the portfolio construction model.
            These are always just the new/updated targets and not a complete set of targets</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Execution.ImmediateExecutionModel">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Execution.IExecutionModel"/> that immediately submits
            market orders to achieve the desired portfolio targets
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Execution.ImmediateExecutionModel.Execute(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget[])">
            <summary>
            Immediately submits orders for the specified portfolio targets.
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="targets">The portfolio targets to be ordered</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Execution.ImmediateExecutionModel.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Execution.NullExecutionModel">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Execution.IExecutionModel"/> that does nothing
            </summary>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.INotifiedSecurityChanges">
            <summary>
            Types implementing this interface will be called when the algorithm's set of securities changes
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.INotifiedSecurityChanges.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel">
            <summary>
            Algorithm framework model that
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Alphas.Insight[])">
            <summary>
            Create portfolio targets from the specified insights
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="insights">The insights to create portfolio targets from</param>
            <returns>An enumerable of portfolio targets to be sent to the execution model</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Portfolio.IPortfolioOptimizer">
            <summary>
            Interface for portfolio optimization algorithms
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.IPortfolioOptimizer.Optimize(System.Double[0:,0:],System.Double[],System.Double[0:,0:])">
            <summary>
            Perform portfolio optimization for a provided matrix of historical returns and an array of expected returns
            </summary>
            <param name="historicalReturns">Matrix of annualized historical returns where each column represents a security and each row returns for the given date/time (size: K x N).</param>
            <param name="expectedReturns">Array of double with the portfolio annualized expected returns (size: K x 1).</param>
            <param name="covariance">Multi-dimensional array of double with the portfolio covariance of annualized returns (size: K x K).</param>
            <returns>Array of double with the portfolio weights (size: K x 1)</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Portfolio.NullPortfolioConstructionModel">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel"/> that does nothing
            </summary>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Portfolio.PortfolioBias">
            <summary>
            Specifies the bias of the portfolio (Short, Long/Short, Long) 
            </summary>
        </member>
        <member name="F:QuantConnect.Algorithm.Framework.Portfolio.PortfolioBias.Short">
            <summary>
            Portfolio can only have short positions
            </summary>
        </member>
        <member name="F:QuantConnect.Algorithm.Framework.Portfolio.PortfolioBias.LongShort">
            <summary>
            Portfolio can have both long and short positions
            </summary>
        </member>
        <member name="F:QuantConnect.Algorithm.Framework.Portfolio.PortfolioBias.Long">
            <summary>
            Portfolio can only have long positions
            </summary>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel">
            <summary>
            Provides a base class for portfolio construction models
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.RebalanceOnSecurityChanges">
            <summary>
            True if should rebalance portfolio on security changes. True by default
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.RebalanceOnInsightChanges">
            <summary>
            True if should rebalance portfolio on new insights or expiration of insights. True by default
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.InsightCollection">
            <summary>
            Provides a collection for managing insights
            </summary>
            <remarks>Derived classes should use this collection if they want insight
            expiration to trigger a rebalance</remarks>
        </member>
        <member name="P:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.Algorithm">
            <summary>
            The algorithm instance
            </summary>
        </member>
        <member name="F:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.PythonWrapper">
            <summary>
            This is required due to a limitation in PythonNet to resolved overriden methods.
            When Python calls a C# method that calls a method that's overriden in python it won't
            run the python implementation unless the call is performed through python too.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.#ctor(System.Func{System.DateTime,System.Nullable{System.DateTime}})">
            <summary>
            Initialize a new instance of <see cref="T:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel"/>
            </summary>
            <param name="rebalancingFunc">For a given algorithm UTC DateTime returns the next expected rebalance time
            or null if unknown, in which case the function will be called again in the next loop. Returning current time
            will trigger rebalance. If null will be ignored</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.#ctor(System.Func{System.DateTime,System.DateTime})">
            <summary>
            Initialize a new instance of <see cref="T:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel"/>
            </summary>
            <param name="rebalancingFunc">For a given algorithm UTC DateTime returns the next expected rebalance UTC time.
            Returning current time will trigger rebalance. If null will be ignored</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.SetPythonWrapper(QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper)">
            <summary>
            Used to set the <see cref="T:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper"/> instance if any
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.CreateTargets(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Alphas.Insight[])">
            <summary>
            Create portfolio targets from the specified insights
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="insights">The insights to create portfolio targets from</param>
            <returns>An enumerable of portfolio targets to be sent to the execution model</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.GetTargetInsights">
            <summary>
            Gets the target insights to calculate a portfolio target percent for
            </summary>
            <returns>An enumerable of the target insights</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.ShouldCreateTargetForInsight(QuantConnect.Algorithm.Framework.Alphas.Insight)">
            <summary>
            Method that will determine if the portfolio construction model should create a
            target for this insight
            </summary>
            <param name="insight">The insight to create a target for</param>
            <returns>True if the portfolio should create a target for the insight</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.DetermineTargetPercent(System.Collections.Generic.List{QuantConnect.Algorithm.Framework.Alphas.Insight})">
            <summary>
            Will determine the target percent for each insight
            </summary>
            <param name="activeInsights">The active insights to generate a target for</param>
            <returns>A target percent for each insight</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.SetRebalancingFunc(Python.Runtime.PyObject)">
            <summary>
            Python helper method to set the rebalancing function.
            This is required due to a python net limitation not being able to use the base type constructor, and also because
            when python algorithms use C# portfolio construction models, it can't convert python methods into func nor resolve
            the correct constructor for the date rules, timespan parameter.
            For performance we prefer python algorithms using the C# implementation
            </summary>
            <param name="rebalance">Rebalancing func or if a date rule, timedelta will be converted into func.
            For a given algorithm UTC DateTime the func returns the next expected rebalance time
            or null if unknown, in which case the function will be called again in the next loop. Returning current time
            will trigger rebalance. If null will be ignored</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.IsRebalanceDue(QuantConnect.Algorithm.Framework.Alphas.Insight[],System.DateTime)">
            <summary>
            Determines if the portfolio should be rebalanced base on the provided rebalancing func,
            if any security change have been taken place or if an insight has expired or a new insight arrived
            If the rebalancing function has not been provided will return true.
            </summary>
            <param name="insights">The insights to create portfolio targets from</param>
            <param name="algorithmUtc">The current algorithm UTC time</param>
            <returns>True if should rebalance</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.RefreshRebalance(System.DateTime)">
            <summary>
            Refresh the next rebalance time and clears the security changes flag
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModel.FilterInvalidInsightMagnitude(QuantConnect.Interfaces.IAlgorithm,QuantConnect.Algorithm.Framework.Alphas.Insight[])">
            <summary>
            Helper class that can be used by the different <see cref="T:QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel"/>
            implementations to filter <see cref="T:QuantConnect.Algorithm.Framework.Alphas.Insight"/> instances with an invalid
            <see cref="P:QuantConnect.Algorithm.Framework.Alphas.Insight.Magnitude"/> value based on the <see cref="T:QuantConnect.Interfaces.IAlgorithmSettings"/>
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="insights">The insight collection to filter</param>
            <returns>Returns a new array of insights removing invalid ones</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel"/> that wraps a <see cref="T:Python.Runtime.PyObject"/> object
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper.RebalanceOnSecurityChanges">
            <summary>
            True if should rebalance portfolio on security changes. True by default
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper.RebalanceOnInsightChanges">
            <summary>
            True if should rebalance portfolio on new insights or expiration of insights. True by default
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper.#ctor(Python.Runtime.PyObject)">
            <summary>
            Constructor for initialising the <see cref="T:QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel"/> class with wrapped <see cref="T:Python.Runtime.PyObject"/> object
            </summary>
            <param name="model">Model defining how to build a portfolio from alphas</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper.CreateTargets(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Alphas.Insight[])">
            <summary>
            Create portfolio targets from the specified insights
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="insights">The insights to create portfolio targets from</param>
            <returns>An enumerable of portfolio targets to be sent to the execution model</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper.ShouldCreateTargetForInsight(QuantConnect.Algorithm.Framework.Alphas.Insight)">
            <summary>
            Method that will determine if the portfolio construction model should create a
            target for this insight
            </summary>
            <param name="insight">The insight to create a target for</param>
            <returns>True if the portfolio should create a target for the insight</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper.IsRebalanceDue(QuantConnect.Algorithm.Framework.Alphas.Insight[],System.DateTime)">
            <summary>
            Determines if the portfolio should be rebalanced base on the provided rebalancing func,
            if any security change have been taken place or if an insight has expired or a new insight arrived
            If the rebalancing function has not been provided will return true.
            </summary>
            <param name="insights">The insights to create portfolio targets from</param>
            <param name="algorithmUtc">The current algorithm UTC time</param>
            <returns>True if should rebalance</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper.GetTargetInsights">
            <summary>
            Gets the target insights to calculate a portfolio target percent for
            </summary>
            <returns>An enumerable of the target insights</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Portfolio.PortfolioConstructionModelPythonWrapper.DetermineTargetPercent(System.Collections.Generic.List{QuantConnect.Algorithm.Framework.Alphas.Insight})">
            <summary>
            Will determine the target percent for each insight
            </summary>
            <param name="activeInsights">The active insights to generate a target for</param>
            <returns>A target percent for each insight</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel"/> that combines multiple risk
            models into a single risk management model and properly sets each insights 'SourceModel' property.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel.#ctor(QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel[])">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel"/> class
            </summary>
            <param name="riskManagementModels">The individual risk management models defining this composite model</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel.#ctor(System.Collections.Generic.IEnumerable{QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel})">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel"/> class
            </summary>
            <param name="riskManagementModels">The individual risk management models defining this composite model</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel.#ctor(Python.Runtime.PyObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel"/> class
            </summary>
            <param name="riskManagementModels">The individual risk management models defining this composite model</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel.#ctor(Python.Runtime.PyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel"/> class
            </summary>
            <param name="riskManagementModel">The individual risk management model defining this composite model</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel.ManageRisk(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget[])">
            <summary>
            Manages the algorithm's risk at each time step.
            This method patches this call through the each of the wrapped models.
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="targets">The current portfolio targets to be assessed for risk</param>
            <returns>The new portfolio targets</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed.
            This method patches this call through the each of the wrapped models.
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel.AddRiskManagement(QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel)">
            <summary>
            Adds a new <see cref="T:QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel"/> instance
            </summary>
            <param name="riskManagementModel">The risk management model to add</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.CompositeRiskManagementModel.AddRiskManagement(Python.Runtime.PyObject)">
            <summary>
            Adds a new <see cref="T:QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel"/> instance
            </summary>
            <param name="pyRiskManagementModel">The risk management model to add</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel">
            <summary>
            Algorithm framework model that manages an algorithm's risk/downside
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel.ManageRisk(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget[])">
            <summary>
            Manages the algorithm's risk at each time step
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="targets">The current portfolio targets to be assessed for risk</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Risk.NullRiskManagementModel">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel"/> that does nothing
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.NullRiskManagementModel.ManageRisk(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget[])">
            <summary>
            Manages the algorithm's risk at each time step
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="targets">The current portfolio targets to be assessed for risk</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Risk.RiskManagementModel">
            <summary>
            Provides a base class for risk management models
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.RiskManagementModel.ManageRisk(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget[])">
            <summary>
            Manages the algorithm's risk at each time step
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="targets">The current portfolio targets to be assessed for risk</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.RiskManagementModel.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Risk.RiskManagementModelPythonWrapper">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel"/> that wraps a <see cref="T:Python.Runtime.PyObject"/> object
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.RiskManagementModelPythonWrapper.#ctor(Python.Runtime.PyObject)">
            <summary>
            Constructor for initialising the <see cref="T:QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel"/> class with wrapped <see cref="T:Python.Runtime.PyObject"/> object
            </summary>
            <param name="model">Model defining how risk is managed</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.RiskManagementModelPythonWrapper.ManageRisk(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget[])">
            <summary>
            Manages the algorithm's risk at each time step
            </summary>
            <param name="algorithm">The algorithm instance</param>
            <param name="targets">The current portfolio targets to be assessed for risk</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Risk.RiskManagementModelPythonWrapper.OnSecuritiesChanged(QuantConnect.Algorithm.QCAlgorithm,QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="algorithm">The algorithm instance that experienced the change in securities</param>
            <param name="changes">The security additions and removals from the algorithm</param>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Selection.CompositeUniverseSelectionModel">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel"/> that combines multiple universe
            selection models into a single model.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CompositeUniverseSelectionModel.#ctor(QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel[])">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.CompositeUniverseSelectionModel"/> class
            </summary>
            <param name="universeSelectionModels">The individual universe selection models defining this composite model</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CompositeUniverseSelectionModel.#ctor(Python.Runtime.PyObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.CompositeUniverseSelectionModel"/> class
            </summary>
            <param name="universeSelectionModels">The individual universe selection models defining this composite model</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CompositeUniverseSelectionModel.#ctor(Python.Runtime.PyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.CompositeUniverseSelectionModel"/> class
            </summary>
            <param name="universeSelectionModel">The individual universe selection model defining this composite model</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CompositeUniverseSelectionModel.AddUniverseSelection(QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel)">
            <summary>
            Adds a new <see cref="T:QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel"/>
            </summary>
            <param name="universeSelectionModel">The universe selection model to add</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CompositeUniverseSelectionModel.AddUniverseSelection(Python.Runtime.PyObject)">
            <summary>
            Adds a new <see cref="T:QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel"/>
            </summary>
            <param name="pyUniverseSelectionModel">The universe selection model to add</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CompositeUniverseSelectionModel.GetNextRefreshTimeUtc">
            <summary>
            Gets the next time the framework should invoke the `CreateUniverses` method to refresh the set of universes.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CompositeUniverseSelectionModel.CreateUniverses(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Creates the universes for this algorithm.
            </summary>
            <param name="algorithm">The algorithm instance to create universes for</param>
            <returns>The universes to be used by the algorithm</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Selection.CustomUniverse">
            <summary>
            Defines a universe as a set of dynamically set symbols.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CustomUniverse.#ctor(QuantConnect.Data.SubscriptionDataConfig,QuantConnect.Data.UniverseSelection.UniverseSettings,System.TimeSpan,System.Func{System.DateTime,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.CustomUniverse"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CustomUniverse.GetSubscriptionRequests(QuantConnect.Securities.Security,System.DateTime,System.DateTime,QuantConnect.Interfaces.ISubscriptionDataConfigService)">
            <summary>
            Gets the subscription requests to be added for the specified security
            </summary>
            <param name="security">The security to get subscriptions for</param>
            <param name="currentTimeUtc">The current time in utc. This is the frontier time of the algorithm</param>
            <param name="maximumEndTimeUtc">The max end time</param>
            <param name="subscriptionService">Instance which implements <see cref="T:QuantConnect.Interfaces.ISubscriptionDataConfigService"/> interface</param>
            <returns>All subscriptions required by this security</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel"/> that simply
            subscribes to the specified set of symbols
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel.#ctor(System.String,System.Func{System.DateTime,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel"/> class
            for <see cref="F:QuantConnect.Market.USA"/> and <see cref="F:QuantConnect.SecurityType.Equity"/>
            using the algorithm's universe settings
            </summary>
            <param name="name">A unique name for this universe</param>
            <param name="selector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel.#ctor(System.String,Python.Runtime.PyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel"/> class
            for <see cref="F:QuantConnect.Market.USA"/> and <see cref="F:QuantConnect.SecurityType.Equity"/>
            using the algorithm's universe settings
            </summary>
            <param name="name">A unique name for this universe</param>
            <param name="selector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel.#ctor(QuantConnect.SecurityType,System.String,System.String,System.Func{System.DateTime,System.Collections.Generic.IEnumerable{System.String}},QuantConnect.Data.UniverseSelection.UniverseSettings,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel"/> class
            </summary>
            <param name="securityType">The security type of the universe</param>
            <param name="name">A unique name for this universe</param>
            <param name="market">The market of the universe</param>
            <param name="selector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
            <param name="universeSettings">The settings used when adding symbols to the algorithm, specify null to use algorithm.UniverseSettings</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel.#ctor(QuantConnect.SecurityType,System.String,System.String,Python.Runtime.PyObject,QuantConnect.Data.UniverseSelection.UniverseSettings,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel"/> class
            </summary>
            <param name="securityType">The security type of the universe</param>
            <param name="name">A unique name for this universe</param>
            <param name="market">The market of the universe</param>
            <param name="selector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
            <param name="universeSettings">The settings used when adding symbols to the algorithm, specify null to use algorithm.UniverseSettings</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel.CreateUniverses(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Creates the universes for this algorithm. Called at algorithm start.
            </summary>
            <returns>The universes defined by this model</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel.Select(QuantConnect.Algorithm.QCAlgorithm,System.DateTime)">
            <summary>
            
            </summary>
            <param name="algorithm"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.CustomUniverseSelectionModel.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel">
            <summary>
            Algorithm framework model that defines the universes to be used by an algorithm
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel.GetNextRefreshTimeUtc">
            <summary>
            Gets the next time the framework should invoke the `CreateUniverses` method to refresh the set of universes.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel.CreateUniverses(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Creates the universes for this algorithm. Called once after <see cref="M:QuantConnect.Interfaces.IAlgorithm.Initialize"/>
            </summary>
            <param name="algorithm">The algorithm instance to create universes for</param>
            <returns>The universes to be used by the algorithm</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Selection.ManualUniverse">
            <summary>
            Defines a universe as a set of manually set symbols. This differs from <see cref="T:QuantConnect.Data.UniverseSelection.UserDefinedUniverse"/>
            in that these securities were not added via AddSecurity.
            </summary>
            <remarks>Incompatible with multiple <see cref="T:QuantConnect.Data.UniverseSelection.Universe"/> selecting the same <see cref="T:QuantConnect.Symbol"/>.
            with different <see cref="T:QuantConnect.Data.SubscriptionDataConfig"/>. More information <see cref="M:QuantConnect.Algorithm.Framework.Selection.ManualUniverse.GetSubscriptionRequests(QuantConnect.Securities.Security,System.DateTime,System.DateTime,QuantConnect.Interfaces.ISubscriptionDataConfigService)"/></remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.ManualUniverse.#ctor(QuantConnect.Data.SubscriptionDataConfig,QuantConnect.Data.UniverseSelection.UniverseSettings,QuantConnect.Securities.ISecurityInitializer,System.Collections.Generic.IEnumerable{QuantConnect.Symbol})">
            <summary>
            Creates a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.ManualUniverse"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.ManualUniverse.#ctor(QuantConnect.Data.SubscriptionDataConfig,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Collections.Generic.IEnumerable{QuantConnect.Symbol})">
            <summary>
            Creates a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.ManualUniverse"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.ManualUniverse.#ctor(QuantConnect.Data.SubscriptionDataConfig,QuantConnect.Data.UniverseSelection.UniverseSettings,QuantConnect.Symbol[])">
            <summary>
            Creates a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.ManualUniverse"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.ManualUniverse.GetSubscriptionRequests(QuantConnect.Securities.Security,System.DateTime,System.DateTime,QuantConnect.Interfaces.ISubscriptionDataConfigService)">
            <summary>
            Gets the subscription requests to be added for the specified security
            </summary>
            <param name="security">The security to get subscriptions for</param>
            <param name="currentTimeUtc">The current time in utc. This is the frontier time of the algorithm</param>
            <param name="maximumEndTimeUtc">The max end time</param>
            <param name="subscriptionService">Instance which implements <see cref="T:QuantConnect.Interfaces.ISubscriptionDataConfigService"/> interface</param>
            <returns>All subscriptions required by this security</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel"/> that simply
            subscribes to the specified set of symbols
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel"/> class using the algorithm's
            security initializer and universe settings
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel.#ctor(System.Collections.Generic.IEnumerable{QuantConnect.Symbol})">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel"/> class using the algorithm's
            security initializer and universe settings
            </summary>
            <param name="symbols">The symbols to subscribe to.
            Should not send in symbols at <see cref="P:QuantConnect.Algorithm.QCAlgorithm.Securities"/> since those will be managed by the <see cref="T:QuantConnect.Data.UniverseSelection.UserDefinedUniverse"/></param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel.#ctor(QuantConnect.Symbol[])">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel"/> class using the algorithm's
            security initializer and universe settings
            </summary>
            <param name="symbols">The symbols to subscribe to
            Should not send in symbols at <see cref="P:QuantConnect.Algorithm.QCAlgorithm.Securities"/> since those will be managed by the <see cref="T:QuantConnect.Data.UniverseSelection.UserDefinedUniverse"/></param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel.#ctor(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},QuantConnect.Data.UniverseSelection.UniverseSettings,QuantConnect.Securities.ISecurityInitializer)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel"/> class
            </summary>
            <param name="symbols">The symbols to subscribe to
            Should not send in symbols at <see cref="P:QuantConnect.Algorithm.QCAlgorithm.Securities"/> since those will be managed by the <see cref="T:QuantConnect.Data.UniverseSelection.UserDefinedUniverse"/></param>
            <param name="universeSettings">The settings used when adding symbols to the algorithm, specify null to use algorthm.UniverseSettings</param>
            <param name="securityInitializer">Optional security initializer invoked when creating new securities, specify null to use algorithm.SecurityInitializer</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.ManualUniverseSelectionModel.CreateUniverses(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Creates the universes for this algorithm.
            Called at algorithm start.
            </summary>
            <returns>The universes defined by this model</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Selection.NullUniverseSelectionModel">
            <summary>
            Provides a null implementation of <see cref="T:QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.NullUniverseSelectionModel.CreateUniverses(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Creates the universes for this algorithm.
            Called at algorithm start.
            </summary>
            <returns>The universes defined by this model</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Selection.UniverseSelectionModel">
            <summary>
            Provides a base class for universe selection models.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.UniverseSelectionModel.GetNextRefreshTimeUtc">
            <summary>
            Gets the next time the framework should invoke the `CreateUniverses` method to refresh the set of universes.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.UniverseSelectionModel.CreateUniverses(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Creates the universes for this algorithm. Called once after <see cref="M:QuantConnect.Interfaces.IAlgorithm.Initialize"/>
            </summary>
            <param name="algorithm">The algorithm instance to create universes for</param>
            <returns>The universes to be used by the algorithm</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Framework.Selection.UniverseSelectionModelPythonWrapper">
            <summary>
            Provides an implementation of <see cref="T:QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel"/> that wraps a <see cref="T:Python.Runtime.PyObject"/> object
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.UniverseSelectionModelPythonWrapper.GetNextRefreshTimeUtc">
            <summary>
            Gets the next time the framework should invoke the `CreateUniverses` method to refresh the set of universes.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.UniverseSelectionModelPythonWrapper.#ctor(Python.Runtime.PyObject)">
            <summary>
            Constructor for initialising the <see cref="T:QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel"/> class with wrapped <see cref="T:Python.Runtime.PyObject"/> object
            </summary>
            <param name="model">Model defining universes for the algorithm</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Framework.Selection.UniverseSelectionModelPythonWrapper.CreateUniverses(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Creates the universes for this algorithm. Called once after <see cref="M:QuantConnect.Interfaces.IAlgorithm.Initialize"/>
            </summary>
            <param name="algorithm">The algorithm instance to create universes for</param>
            <returns>The universes to be used by the algorithm</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.CandlestickPatterns">
            <summary>
            Provides helpers for using candlestick patterns
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.#ctor(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.CandlestickPatterns"/> class
            </summary>
            <param name="algorithm">The algorithm instance</param>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.TwoCrows(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TwoCrows"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeBlackCrows(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeInside(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeInside"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeLineStrike(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeOutside(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeStarsInSouth(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ThreeWhiteSoldiers(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.AbandonedBaby(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.AdvanceBlock(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.BeltHold(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.BeltHold"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Breakaway(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Breakaway"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ClosingMarubozu(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ConcealedBabySwallow(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Counterattack(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Counterattack"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.DarkCloudCover(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Doji(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Doji"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.DojiStar(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DojiStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.DragonflyDoji(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Engulfing(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Engulfing"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.EveningDojiStar(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.EveningStar(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.GapSideBySideWhite(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.GravestoneDoji(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Hammer(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hammer"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.HangingMan(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HangingMan"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Harami(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Harami"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.HaramiCross(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HaramiCross"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.HighWaveCandle(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Hikkake(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hikkake"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.HikkakeModified(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.HomingPigeon(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.IdenticalThreeCrows(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.InNeck(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InNeck"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.InvertedHammer(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Kicking(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Kicking"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.KickingByLength(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.KickingByLength"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.LadderBottom(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LadderBottom"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.LongLeggedDoji(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.LongLineCandle(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Marubozu(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Marubozu"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.MatchingLow(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatchingLow"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.MatHold(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatHold"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.MorningDojiStar(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.MorningStar(QuantConnect.Symbol,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.OnNeck(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.OnNeck"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Piercing(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Piercing"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.RickshawMan(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RickshawMan"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.RiseFallThreeMethods(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.SeparatingLines(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ShootingStar(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShootingStar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.ShortLineCandle(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.SpinningTop(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SpinningTop"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.StalledPattern(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StalledPattern"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.StickSandwich(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StickSandwich"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Takuri(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Takuri"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.TasukiGap(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TasukiGap"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Thrusting(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Thrusting"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.Tristar(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Tristar"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.UniqueThreeRiver(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.UpsideGapTwoCrows(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.CandlestickPatterns.UpDownGapThreeMethods(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods"/> pattern indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose pattern we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The pattern indicator for the requested symbol.</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.ConstituentUniverseDefinitions">
            <summary>
            Provides helpers for defining constituent universes based on the Morningstar
            asset classification <see cref="T:QuantConnect.Data.Fundamental.AssetClassification"/> https://www.morningstar.com/
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.AggressiveGrowth(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Universe which selects companies whose revenues and earnings have both been growing significantly faster than
            the general economy.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.ClassicGrowth(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Universe which selects companies that are growing respectably faster than the general economy, and often pay a
            steady dividend. They tend to be mature and solidly profitable businesses.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Cyclicals(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Universe which selects companies in the cyclicals and durables sectors, except those in the three types below.
            The profits of cyclicals tend to rise and fall with the general economy.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Distressed(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Universe which selects companies that have had consistently declining cash flows and earnings over the past
            three years, and/or very high debt.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.HardAsset(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Universe which selects companies that deal in assets such as oil, metals, and real estate, which tend to do
            well in inflationary environments.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.HighYield(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Universe which selects companies that have dividend yields at least twice the average for large-cap stocks.
            They tend to be mature, slow-growing companies.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.SlowGrowth(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Universe which selects companies that have shown slow revenue and earnings growth (typically less than the rate
            of GDP growth) over at least three years.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.SpeculativeGrowth(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Universe which selects companies that have shown strong revenue growth but slower or spotty earnings growth.
            Very small or young companies also tend to fall into this class.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.LargeValue(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Classifies securities according to market capitalization and growth and value factor
            </summary>
            <remarks>Please refer to http://www.morningstar.com/InvGlossary/morningstar_style_box.aspx </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.LargeCore(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Classifies securities according to market capitalization and growth and value factor
            </summary>
            <remarks>Please refer to http://www.morningstar.com/InvGlossary/morningstar_style_box.aspx </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.LargeGrowth(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Classifies securities according to market capitalization and growth and value factor
            </summary>
            <remarks>Please refer to http://www.morningstar.com/InvGlossary/morningstar_style_box.aspx </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.MidValue(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Classifies securities according to market capitalization and growth and value factor
            </summary>
            <remarks>Please refer to http://www.morningstar.com/InvGlossary/morningstar_style_box.aspx </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.MidCore(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Classifies securities according to market capitalization and growth and value factor
            </summary>
            <remarks>Please refer to http://www.morningstar.com/InvGlossary/morningstar_style_box.aspx </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.MidGrowth(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Classifies securities according to market capitalization and growth and value factor
            </summary>
            <remarks>Please refer to http://www.morningstar.com/InvGlossary/morningstar_style_box.aspx </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.SmallValue(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Classifies securities according to market capitalization and growth and value factor
            </summary>
            <remarks>Please refer to http://www.morningstar.com/InvGlossary/morningstar_style_box.aspx </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.SmallCore(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Classifies securities according to market capitalization and growth and value factor
            </summary>
            <remarks>Please refer to http://www.morningstar.com/InvGlossary/morningstar_style_box.aspx </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.SmallGrowth(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Classifies securities according to market capitalization and growth and value factor
            </summary>
            <remarks>Please refer to http://www.morningstar.com/InvGlossary/morningstar_style_box.aspx </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Agriculture(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Agriculture industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.BuildingMaterials(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar BuildingMaterials industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Chemicals(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Chemicals industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.ForestProducts(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar ForestProducts industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.MetalsAndMining(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar MetalsAndMining industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Steel(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Steel industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.VehiclesAndParts(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar VehiclesAndParts industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.FixturesAndAppliances(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar FixturesAndAppliances industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.HomebuildingAndConstruction(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar HomebuildingAndConstruction industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.ManufacturingApparelAndAccessories(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar ManufacturingApparelAndAccessories industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.PackagingAndContainers(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar PackagingAndContainers industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.PersonalServices(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar PersonalServices industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Restaurants(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Restaurants industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.RetailCyclical(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar RetailCyclical industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.TravelAndLeisure(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar TravelAndLeisure industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.AssetManagement(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar AssetManagement industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Banks(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Banks industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.CapitalMarkets(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar CapitalMarkets industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Insurance(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Insurance industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.DiversifiedFinancialServices(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar DiversifiedFinancialServices industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.CreditServices(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar CreditServices industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.RealEstate(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar RealEstate industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.REITs(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar REITs industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.BeveragesAlcoholic(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar BeveragesAlcoholic industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.BeveragesNonAlcoholic(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar BeveragesNonAlcoholic industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.ConsumerPackagedGoods(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar ConsumerPackagedGoods industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Education(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Education industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.RetailDefensive(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar RetailDefensive industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.TobaccoProducts(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar TobaccoProducts industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Biotechnology(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Biotechnology industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.DrugManufacturers(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar DrugManufacturers industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.HealthcarePlans(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar HealthcarePlans industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.HealthcareProvidersAndServices(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar HealthcareProvidersAndServices industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.MedicalDevicesAndInstruments(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar MedicalDevicesAndInstruments industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.MedicalDiagnosticsAndResearch(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar MedicalDiagnosticsAndResearch industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.MedicalDistribution(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar MedicalDistribution industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.UtilitiesIndependentPowerProducers(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar UtilitiesIndependentPowerProducers industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.UtilitiesRegulated(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar UtilitiesRegulated industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.TelecommunicationServices(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar TelecommunicationServices industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.MediaDiversified(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar MediaDiversified industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.InteractiveMedia(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar InteractiveMedia industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.OilAndGas(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar OilAndGas industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.OtherEnergySources(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar OtherEnergySources industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.AerospaceAndDefense(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar AerospaceAndDefense industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.BusinessServices(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar BusinessServices industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Conglomerates(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Conglomerates industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Construction(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Construction industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.FarmAndHeavyConstructionMachinery(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar FarmAndHeavyConstructionMachinery industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.IndustrialDistribution(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar IndustrialDistribution industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.IndustrialProducts(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar IndustrialProducts industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Transportation(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Transportation industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.WasteManagement(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar WasteManagement industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Software(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Software industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Hardware(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Hardware industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.Semiconductors(QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Morningstar Semiconductors industry group <see cref="T:QuantConnect.Data.Fundamental.MorningstarIndustryGroupCode"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.ConstituentUniverseDefinitions.#ctor(QuantConnect.Interfaces.IAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.ConstituentUniverseDefinitions"/> class
            </summary>
            <param name="algorithm">The algorithm instance, used for obtaining the default <see cref="T:QuantConnect.Data.UniverseSelection.UniverseSettings"/></param>
        </member>
        <member name="T:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions">
            <summary>
            Provides helpers for defining universes based on the daily dollar volume
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions.#ctor(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions"/> class
            </summary>
            <param name="algorithm">The algorithm instance, used for obtaining the default <see cref="T:QuantConnect.Data.UniverseSelection.UniverseSettings"/></param>
        </member>
        <member name="M:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions.Top(System.Int32,QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Creates a new coarse universe that contains the top count of stocks
            by daily dollar volume
            </summary>
            <param name="count">The number of stock to select</param>
            <param name="universeSettings">The settings for stocks added by this universe.
            Defaults to <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/></param>
            <returns>A new coarse universe for the top count of stocks by dollar volume</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions.Bottom(System.Int32,QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Creates a new coarse universe that contains the bottom count of stocks
            by daily dollar volume
            </summary>
            <param name="count">The number of stock to select</param>
            <param name="universeSettings">The settings for stocks added by this universe.
            Defaults to <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/></param>
            <returns>A new coarse universe for the bottom count of stocks by dollar volume</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions.Percentile(System.Double,QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Creates a new coarse universe that contains stocks in the specified
            dollar volume percentile
            </summary>
            <param name="percentile">The desired dollar volume percentile (0 to 100 inclusive)</param>
            <param name="universeSettings">The settings for stocks added by this universe.
            Defaults to <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/></param>
            <returns>A new coarse universe for the bottom count of stocks by dollar volume</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.DollarVolumeUniverseDefinitions.Percentile(System.Double,System.Double,QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Creates a new coarse universe that contains stocks in the specified dollar volume percentile range,
            that is, this universe will produce stocks with dollar volumes between the lower percentile bound
            and the upper percentile bound
            </summary>
            <param name="lowerPercentile">The desired lower dollar volume  percentile bound (0 to 100 inclusive)</param>
            <param name="upperPercentile">The desired upper dollar volume  percentile bound (0 to 100 inclusive)</param>
            <param name="universeSettings">The settings for stocks added by this universe.
            Defaults to <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/></param>
            <returns>A new coarse universe for the bottom count of stocks by dollar volume</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.IndexUniverseDefinitions">
            <summary>
            Provides helpers for defining universes based on index definitions
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.IndexUniverseDefinitions.#ctor(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.IndexUniverseDefinitions"/> class
            </summary>
            <param name="algorithm">The algorithm instance, used for obtaining the default <see cref="T:QuantConnect.Data.UniverseSelection.UniverseSettings"/></param>
        </member>
        <member name="P:QuantConnect.Algorithm.IndexUniverseDefinitions.QC500">
            <summary>
            Creates a new fine universe that contains the constituents of QC500 index based onthe company fundamentals
            The algorithm creates a default tradable and liquid universe containing 500 US equities
            which are chosen at the first trading day of each month.
            </summary>
            <returns>A new coarse universe for the top count of stocks by dollar volume</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.QCAlgorithm">
            <summary>
            QC Algorithm Base Class - Handle the basic requirements of a trading algorithm,
            allowing user to focus on event methods. The QCAlgorithm class implements Portfolio,
            Securities, Transactions and Data Subscription Management.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.MarketHoursDatabase">
            <summary>
            Gets the market hours database in use by this algorithm
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.SymbolPropertiesDatabase">
            <summary>
            Gets the symbol properties database in use by this algorithm
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.#ctor">
            <summary>
            QCAlgorithm Base Class Constructor - Initialize the underlying QCAlgorithm components.
            QCAlgorithm manages the transactions, portfolio, charting and security subscriptions for the users algorithms.
            </summary>
        </member>
        <member name="E:QuantConnect.Algorithm.QCAlgorithm.InsightsGenerated">
            <summary>
            Event fired when the algorithm generates insights
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Securities">
            <summary>
            Security collection is an array of the security objects such as Equities and FOREX. Securities data
            manages the properties of tradeable assets such as price, open and close time and holdings information.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.ActiveSecurities">
            <summary>
            Read-only dictionary containing all active securities. An active security is
            a security that is currently selected by the universe or has holdings or open orders.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Portfolio">
            <summary>
            Portfolio object provieds easy access to the underlying security-holding properties; summed together in a way to make them useful.
            This saves the user time by providing common portfolio requests in a single
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.AccountCurrency">
            <summary>
            Gets the account currency
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.TimeKeeper">
            <summary>
            Gets the time keeper instance
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.SubscriptionManager">
            <summary>
            Generic Data Manager - Required for compiling all data feeds in order, and passing them into algorithm event methods.
            The subscription manager contains a list of the data feed's we're subscribed to and properties of each data feed.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.BrokerageModel">
            <summary>
            Gets the brokerage model - used to model interactions with specific brokerages.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.BrokerageMessageHandler">
            <summary>
            Gets the brokerage message handler used to decide what to do
            with each message sent from the brokerage
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Notify">
            <summary>
            Notification Manager for Sending Live Runtime Notifications to users about important events.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Schedule">
            <summary>
            Gets schedule manager for adding/removing scheduled events
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Status">
            <summary>
            Gets or sets the current status of the algorithm
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer">
            <summary>
            Gets an instance that is to be used to initialize newly created securities.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.TradeBuilder">
            <summary>
            Gets the Trade Builder to generate trades from executions
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.CandlestickPatterns">
            <summary>
            Gets an instance to access the candlestick pattern helper methods
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.DateRules">
            <summary>
            Gets the date rules helper object to make specifying dates for events easier
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.TimeRules">
            <summary>
            Gets the time rules helper object to make specifying times for events easier
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.TradingCalendar">
            <summary>
            Gets trading calendar populated with trading events
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Settings">
            <summary>
            Gets the user settings for the algorithm
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.OptionChainProvider">
            <summary>
            Gets the option chain provider, used to get the list of option contracts for an underlying symbol
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.FutureChainProvider">
            <summary>
            Gets the future chain provider, used to get the list of future contracts for an underlying symbol
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.DefaultOrderProperties">
            <summary>
            Gets the default order properties
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Name">
            <summary>
            Public name for the algorithm as automatically generated by the IDE. Intended for helping distinguish logs by noting
            the algorithm-id.
            </summary>
            <seealso cref="P:QuantConnect.Algorithm.QCAlgorithm.AlgorithmId"/>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Time">
            <summary>
            Read-only value for current time frontier of the algorithm in terms of the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.TimeZone"/>
            </summary>
            <remarks>During backtesting this is primarily sourced from the data feed. During live trading the time is updated from the system clock.</remarks>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.UtcTime">
            <summary>
            Current date/time in UTC.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.TimeZone">
            <summary>
            Gets the time zone used for the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.Time"/> property. The default value
            is <see cref="F:QuantConnect.TimeZones.NewYork"/>
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.StartDate">
            <summary>
            Value of the user set start-date from the backtest.
            </summary>
            <remarks>This property is set with SetStartDate() and defaults to the earliest QuantConnect data available - Jan 1st 1998. It is ignored during live trading </remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.DateTime)"/>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.EndDate">
            <summary>
            Value of the user set start-date from the backtest. Controls the period of the backtest.
            </summary>
            <remarks> This property is set with SetEndDate() and defaults to today. It is ignored during live trading.</remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.DateTime)"/>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.AlgorithmId">
            <summary>
            Algorithm Id for this backtest or live algorithm.
            </summary>
            <remarks>A unique identifier for </remarks>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.LiveMode">
            <summary>
            Boolean property indicating the algorithm is currently running in live mode.
            </summary>
            <remarks>Intended for use where certain behaviors will be enabled while the algorithm is trading live: such as notification emails, or displaying runtime statistics.</remarks>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.DebugMessages">
            <summary>
            Storage for debugging messages before the event handler has passed control back to the Lean Engine.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.String)"/>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.LogMessages">
            <summary>
            Storage for log messages before the event handlers have passed control back to the Lean Engine.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.String)"/>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.RunTimeError">
            <summary>
            Gets the run time error from the algorithm, or null if none was encountered.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.ErrorMessages">
            <summary>
            List of error messages generated by the user's code calling the "Error" function.
            </summary>
            <remarks>This method is best used within a try-catch bracket to handle any runtime errors from a user algorithm.</remarks>
            <see cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.String)"/>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.CurrentSlice">
            <summary>
            Returns the current Slice object
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.ObjectStore">
            <summary>
            Gets the object store, used for persistence
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Initialize">
            <summary>
            Initialise the data and resolution required, as well as the cash and start-end dates for your algorithm. All algorithms must initialized.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.DateTime)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.DateTime)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetCash(System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PostInitialize">
            <summary>
            Called by setup handlers after Initialize and allows the algorithm a chance to organize
            the data gather in the Initialize method
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnWarmupFinished">
            <summary>
            Called when the algorithm has completed initialization and warm up.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetParameter(System.String)">
            <summary>
            Gets the parameter with the specified name. If a parameter
            with the specified name does not exist, null is returned
            </summary>
            <param name="name">The name of the parameter to get</param>
            <returns>The value of the specified parameter, or null if not found</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetParameters">
            <summary>
            Gets a read-only dictionary with all current parameters
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the parameters from the dictionary
            </summary>
            <param name="parameters">Dictionary containing the parameter names to values</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetAvailableDataTypes(System.Collections.Generic.Dictionary{QuantConnect.SecurityType,System.Collections.Generic.List{QuantConnect.TickType}})">
            <summary>
            Set the available data feeds in the <see cref="T:QuantConnect.Securities.SecurityManager"/>
            </summary>
            <param name="availableDataTypes">The different <see cref="T:QuantConnect.TickType"/> each <see cref="T:QuantConnect.Securities.Security"/> supports</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetSecurityInitializer(QuantConnect.Securities.ISecurityInitializer)">
            <summary>
            Sets the security initializer, used to initialize/configure securities after creation.
            The initializer will be applied to all universes and manually added securities.
            </summary>
            <param name="securityInitializer">The security initializer</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetSecurityInitializer(System.Action{QuantConnect.Securities.Security,System.Boolean})">
            <summary>
            Sets the security initializer function, used to initialize/configure securities after creation.
            The initializer will be applied to all universes and manually added securities.
            </summary>
            <param name="securityInitializer">The security initializer function</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetSecurityInitializer(System.Action{QuantConnect.Securities.Security})">
            <summary>
            Sets the security initializer function, used to initialize/configure securities after creation.
            The initializer will be applied to all universes and manually added securities.
            </summary>
            <param name="securityInitializer">The security initializer function</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetOptionChainProvider(QuantConnect.Interfaces.IOptionChainProvider)">
            <summary>
            Sets the option chain provider, used to get the list of option contracts for an underlying symbol
            </summary>
            <param name="optionChainProvider">The option chain provider</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetFutureChainProvider(QuantConnect.Interfaces.IFutureChainProvider)">
            <summary>
            Sets the future chain provider, used to get the list of future contracts for an underlying symbol
            </summary>
            <param name="futureChainProvider">The future chain provider</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnData(QuantConnect.Data.Slice)">
            <summary>
            Event - v3.0 DATA EVENT HANDLER: (Pattern) Basic template for user to override for receiving all subscription data in a single event
            </summary>
            <code>
            TradeBars bars = slice.Bars;
            Ticks ticks = slice.Ticks;
            TradeBar spy = slice["SPY"];
            List{Tick} aaplTicks = slice["AAPL"]
            Quandl oil = slice["OIL"]
            dynamic anySymbol = slice[symbol];
            DataDictionary{Quandl} allQuandlData = slice.Get{Quand}
            Quandl oil = slice.Get{Quandl}("OIL")
            </code>
            <param name="slice">The current slice of data keyed by symbol string</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnSecuritiesChanged(QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Event fired each time the we add/remove securities from the data feed
            </summary>
            <param name="changes">Security additions/removals for this time step</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnMarginCall(System.Collections.Generic.List{QuantConnect.Orders.SubmitOrderRequest})">
            <summary>
            Margin call event handler. This method is called right before the margin call orders are placed in the market.
            </summary>
            <param name="requests">The orders to be executed to bring this algorithm within margin limits</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnMarginCallWarning">
            <summary>
            Margin call warning event handler. This method is called when Portfolio.MarginRemaining is under 5% of your Portfolio.TotalPortfolioValue
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfDay">
            <summary>
            End of a trading day event handler. This method is called at the end of the algorithm day (or multiple times if trading multiple assets).
            </summary>
            <remarks>Method is called 10 minutes before closing to allow user to close out position.</remarks>
            <remarks>Deprecated because different assets have different market close times,
            and because Python does not support two methods with the same name</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfDay(System.String)">
            <summary>
            End of a trading day event handler. This method is called at the end of the algorithm day (or multiple times if trading multiple assets).
            </summary>
            <remarks>
            This method is left for backwards compatibility and is invoked via <see cref="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfDay(QuantConnect.Symbol)"/>, if that method is
            override then this method will not be called without a called to base.OnEndOfDay(string)
            </remarks>
            <param name="symbol">Asset symbol for this end of day event. Forex and equities have different closing hours.</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfDay(QuantConnect.Symbol)">
            <summary>
            End of a trading day event handler. This method is called at the end of the algorithm day (or multiple times if trading multiple assets).
            </summary>
            <param name="symbol">Asset symbol for this end of day event. Forex and equities have different closing hours.</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfAlgorithm">
            <summary>
            End of algorithm run event handler. This method is called at the end of a backtest or live trading operation. Intended for closing out logs.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnOrderEvent(QuantConnect.Orders.OrderEvent)">
            <summary>
            Order fill event handler. On an order fill update the resulting information is passed to this method.
            </summary>
            <param name="orderEvent">Order event details containing details of the evemts</param>
            <remarks>This method can be called asynchronously and so should only be used by seasoned C# experts. Ensure you use proper locks on thread-unsafe objects</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnAssignmentOrderEvent(QuantConnect.Orders.OrderEvent)">
            <summary>
            Option assignment event handler. On an option assignment event for short legs the resulting information is passed to this method.
            </summary>
            <param name="assignmentEvent">Option exercise event details containing details of the assignment</param>
            <remarks>This method can be called asynchronously and so should only be used by seasoned C# experts. Ensure you use proper locks on thread-unsafe objects</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnBrokerageMessage(QuantConnect.Brokerages.BrokerageMessageEvent)">
            <summary>
            Brokerage message event handler. This method is called for all types of brokerage messages.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnBrokerageDisconnect">
            <summary>
            Brokerage disconnected event handler. This method is called when the brokerage connection is lost.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnBrokerageReconnect">
            <summary>
            Brokerage reconnected event handler. This method is called when the brokerage connection is restored after a disconnection.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetDateTime(System.DateTime)">
            <summary>
            Update the internal algorithm time frontier.
            </summary>
            <remarks>For internal use only to advance time.</remarks>
            <param name="frontier">Current utc datetime.</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetTimeZone(System.String)">
            <summary>
            Sets the time zone of the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.Time"/> property in the algorithm
            </summary>
            <param name="timeZone">The desired time zone</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetTimeZone(NodaTime.DateTimeZone)">
            <summary>
            Sets the time zone of the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.Time"/> property in the algorithm
            </summary>
            <param name="timeZone">The desired time zone</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.BrokerageName,QuantConnect.AccountType)">
            <summary>
            Sets the brokerage to emulate in backtesting or paper trading.
            This can be used for brokerages that have been implemented in LEAN
            </summary>
            <param name="brokerage">The brokerage to emulate</param>
            <param name="accountType">The account type (Cash or Margin)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(QuantConnect.Brokerages.IBrokerageModel)">
            <summary>
            Sets the brokerage to emulate in backtesting or paper trading.
            This can be used to set a custom brokerage model.
            </summary>
            <param name="model">The brokerage model to use</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBrokerageMessageHandler(QuantConnect.Brokerages.IBrokerageMessageHandler)">
            <summary>
            Sets the implementation used to handle messages from the brokerage.
            The default implementation will forward messages to debug or error
            and when a <see cref="F:QuantConnect.Brokerages.BrokerageMessageType.Error"/> occurs, the algorithm
            is stopped.
            </summary>
            <param name="handler">The message handler to use</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(QuantConnect.SecurityType,System.String)">
            <summary>
            Sets the benchmark used for computing statistics of the algorithm to the specified symbol
            </summary>
            <param name="symbol">symbol to use as the benchmark</param>
            <param name="securityType">Is the symbol an equity, forex, base, etc. Default SecurityType.Equity</param>
            <remarks>
            Must use symbol that is available to the trade engine in your data store(not strictly enforced)
            </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(System.String)">
            <summary>
            Sets the benchmark used for computing statistics of the algorithm to the specified ticker, defaulting to SecurityType.Equity
            if the ticker doesn't exist in the algorithm
            </summary>
            <param name="ticker">Ticker to use as the benchmark</param>
            <remarks>
            Overload to accept ticker without passing SecurityType. If ticker is in portfolio it will use that SecurityType, otherwise will default to SecurityType.Equity
            </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(QuantConnect.Symbol)">
            <summary>
            Sets the benchmark used for computing statistics of the algorithm to the specified symbol
            </summary>
            <param name="symbol">symbol to use as the benchmark</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(System.Func{System.DateTime,System.Decimal})">
            <summary>
            Sets the specified function as the benchmark, this function provides the value of
            the benchmark at each date/time requested
            </summary>
            <param name="benchmark">The benchmark producing function</param>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Benchmark">
             <summary>
             Benchmark
             </summary>
             <remarks>Use Benchmark to override default symbol based benchmark, and create your own benchmark. For example a custom moving average benchmark </remarks>
            
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetAccountCurrency(System.String)">
            <summary>
            Sets the account currency cash symbol this algorithm is to manage.
            </summary>
            <remarks>Has to be called during <see cref="M:QuantConnect.Algorithm.QCAlgorithm.Initialize"/> before
            calling <see cref="M:QuantConnect.Algorithm.QCAlgorithm.SetCash(System.Decimal)"/> or adding any <see cref="T:QuantConnect.Securities.Security"/></remarks>
            <param name="accountCurrency">The account currency cash symbol to set</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetCash(System.Double)">
            <summary>
            Set initial cash for the strategy while backtesting. During live mode this value is ignored
            and replaced with the actual cash of your brokerage account.
            </summary>
            <param name="startingCash">Starting cash for the strategy backtest</param>
            <remarks>Alias of SetCash(decimal)</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetCash(System.Int32)">
            <summary>
            Set initial cash for the strategy while backtesting. During live mode this value is ignored
            and replaced with the actual cash of your brokerage account.
            </summary>
            <param name="startingCash">Starting cash for the strategy backtest</param>
            <remarks>Alias of SetCash(decimal)</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetCash(System.Decimal)">
            <summary>
            Set initial cash for the strategy while backtesting. During live mode this value is ignored
            and replaced with the actual cash of your brokerage account.
            </summary>
            <param name="startingCash">Starting cash for the strategy backtest</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetCash(System.String,System.Decimal,System.Decimal)">
            <summary>
            Set the cash for the specified symbol
            </summary>
            <param name="symbol">The cash symbol to set</param>
            <param name="startingCash">Decimal cash value of portfolio</param>
            <param name="conversionRate">The current conversion rate for the</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the start date for backtest.
            </summary>
            <param name="day">Int starting date 1-30</param>
            <param name="month">Int month starting date</param>
            <param name="year">Int year starting date</param>
            <remarks>Wrapper for SetStartDate(DateTime).
            Must be less than end date.
            Ignored in live trading mode.</remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.DateTime)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the end date for a backtest run
            </summary>
            <param name="day">Int end date 1-30</param>
            <param name="month">Int month end date</param>
            <param name="year">Int year end date</param>
            <remarks>Wrapper for SetEndDate(datetime).</remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.DateTime)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetAlgorithmId(System.String)">
            <summary>
            Set the algorithm id (backtestId or live deployId for the algorithmm).
            </summary>
            <param name="algorithmId">String Algorithm Id</param>
            <remarks>Intended for internal QC Lean Engine use only as a setter for AlgorihthmId</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.DateTime)">
            <summary>
            Set the start date for the backtest
            </summary>
            <param name="start">Datetime Start date for backtest</param>
            <remarks>Must be less than end date and within data available</remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetStartDate(System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.DateTime)">
            <summary>
            Set the end date for a backtest.
            </summary>
            <param name="end">Datetime value for end date</param>
            <remarks>Must be greater than the start date</remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.SetEndDate(System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetLocked">
            <summary>
            Lock the algorithm initialization to avoid user modifiying cash and data stream subscriptions
            </summary>
            <remarks>Intended for Internal QC Lean Engine use only to prevent accidental manipulation of important properties</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetLocked">
            <summary>
            Gets whether or not this algorithm has been locked and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetLiveMode(System.Boolean)">
            <summary>
            Set live mode state of the algorithm run: Public setter for the algorithm property LiveMode.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetTradeBuilder(QuantConnect.Interfaces.ITradeBuilder)">
            <summary>
            Set the <see cref="T:QuantConnect.Interfaces.ITradeBuilder"/> implementation to generate trades from executions and market price updates
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType,System.String,System.Nullable{QuantConnect.Resolution},System.Boolean,System.Boolean)">
            <summary>
            Add specified data to our data subscriptions. QuantConnect will funnel this data to the handle data routine.
            </summary>
            <param name="securityType">MarketType Type: Equity, Commodity, Future, FOREX or Crypto</param>
            <param name="ticker">The security ticker</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="extendedMarketHours">Show the after market data as well</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType,System.String,System.Nullable{QuantConnect.Resolution},System.Boolean,System.Decimal,System.Boolean)">
            <summary>
            Add specified data to required list. QC will funnel this data to the handle data routine.
            </summary>
            <param name="securityType">MarketType Type: Equity, Commodity, Future, FOREX or Crypto</param>
            <param name="ticker">The security ticker</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <param name="extendedMarketHours">Extended market hours</param>
            <remarks> AddSecurity(SecurityType securityType, Symbol symbol, Resolution resolution, bool fillDataForward, decimal leverage, bool extendedMarketHours)</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.SecurityType,System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal,System.Boolean)">
            <summary>
            Set a required SecurityType-symbol and resolution for algorithm
            </summary>
            <param name="securityType">MarketType Type: Equity, Commodity, Future, FOREX or Crypto</param>
            <param name="ticker">The security ticker, e.g. AAPL</param>
            <param name="resolution">Resolution of the MarketType required: MarketData, Second or Minute</param>
            <param name="market">The market the requested security belongs to, such as 'usa' or 'fxcm'</param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice.</param>
            <param name="leverage">leverage for this security</param>
            <param name="extendedMarketHours">ExtendedMarketHours send in data from 4am - 8pm, not used for FOREX</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Boolean,System.Decimal,System.Boolean)">
            <summary>
            Set a required SecurityType-symbol and resolution for algorithm
            </summary>
            <param name="symbol">The security Symbol</param>
            <param name="resolution">Resolution of the MarketType required: MarketData, Second or Minute</param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice.</param>
            <param name="leverage">leverage for this security</param>
            <param name="extendedMarketHours">ExtendedMarketHours send in data from 4am - 8pm, not used for FOREX</param>
            <returns>The new Security that was added to the algorithm</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddEquity(System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal,System.Boolean)">
            <summary>
            Creates and adds a new <see cref="T:QuantConnect.Securities.Equity.Equity"/> security to the algorithm
            </summary>
            <param name="ticker">The equity ticker symbol</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="market">The equity's market, <seealso cref="T:QuantConnect.Market"/>. Default value is null and looked up using BrokerageModel.DefaultMarkets in <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity``1(QuantConnect.SecurityType,System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal,System.Boolean)"/></param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice. Default is <value>true</value></param>
            <param name="leverage">The requested leverage for this equity. Default is set by <see cref="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer"/></param>
            <param name="extendedMarketHours">True to send data during pre and post market sessions. Default is <value>false</value></param>
            <returns>The new <see cref="T:QuantConnect.Securities.Equity.Equity"/> security</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddOption(System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal)">
            <summary>
            Creates and adds a new equity <see cref="T:QuantConnect.Securities.Option.Option"/> security to the algorithm
            </summary>
            <param name="underlying">The underlying equity ticker</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="market">The equity's market, <seealso cref="T:QuantConnect.Market"/>. Default is value null and looked up using BrokerageModel.DefaultMarkets in <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity``1(QuantConnect.SecurityType,System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal,System.Boolean)"/></param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice. Default is <value>true</value></param>
            <param name="leverage">The requested leverage for this equity. Default is set by <see cref="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer"/></param>
            <returns>The new <see cref="T:QuantConnect.Securities.Option.Option"/> security</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddOption(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal)">
            <summary>
            Creates and adds a new <see cref="T:QuantConnect.Securities.Option.Option"/> security to the algorithm.
            This method can be used to add options with non-equity asset classes
            to the algorithm (e.g. Future Options).
            </summary>
            <param name="underlying">Underlying asset Symbol to use as the option's underlying</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="market">The option's market, <seealso cref="T:QuantConnect.Market"/>. Default value is null, but will be resolved using BrokerageModel.DefaultMarkets in <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity``1(QuantConnect.SecurityType,System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal,System.Boolean)"/></param>
            <param name="fillDataForward">If true, data will be provided to the algorithm every Second, Minute, Hour, or Day, while the asset is open and depending on the Resolution this option was configured to use.</param>
            <param name="leverage">The requested leverage for the </param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddFuture(System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal)">
            <summary>
            Creates and adds a new <see cref="T:QuantConnect.Securities.Future.Future"/> security to the algorithm
            </summary>
            <param name="ticker">The future ticker</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="market">The futures market, <seealso cref="T:QuantConnect.Market"/>. Default is value null and looked up using BrokerageModel.DefaultMarkets in <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity``1(QuantConnect.SecurityType,System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal,System.Boolean)"/></param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice. Default is <value>true</value></param>
            <param name="leverage">The requested leverage for this equity. Default is set by <see cref="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer"/></param>
            <returns>The new <see cref="T:QuantConnect.Securities.Future.Future"/> security</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddFutureContract(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Boolean,System.Decimal)">
            <summary>
            Creates and adds a new single <see cref="T:QuantConnect.Securities.Future.Future"/> contract to the algorithm
            </summary>
            <param name="symbol">The futures contract symbol</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice. Default is <value>true</value></param>
            <param name="leverage">The requested leverage for this equity. Default is set by <see cref="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer"/></param>
            <returns>The new <see cref="T:QuantConnect.Securities.Future.Future"/> security</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddFutureOption(QuantConnect.Symbol,System.Func{QuantConnect.Securities.OptionFilterUniverse,QuantConnect.Securities.OptionFilterUniverse})">
            <summary>
            Creates and adds a new Future Option contract to the algorithm.
            </summary>
            <param name="symbol">The <see cref="T:QuantConnect.Securities.Future.Future"/> canonical symbol (i.e. Symbol returned from <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddFuture(System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal)"/>)</param>
            <param name="optionFilter">Filter to apply to option contracts loaded as part of the universe</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Option.Option"/> security, containing a <see cref="T:QuantConnect.Securities.Future.Future"/> as its underlying.</returns>
            <exception cref="T:System.ArgumentException">The symbol provided is not canonical.</exception>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddFutureOptionContract(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Boolean,System.Decimal)">
            <summary>
            Adds a future option contract to the algorithm.
            </summary>
            <param name="symbol">Option contract Symbol</param>
            <param name="resolution">Resolution of the option contract, i.e. the granularity of the data</param>
            <param name="fillDataForward">If true, this will fill in missing data points with the previous data point</param>
            <param name="leverage">The leverage to apply to the option contract</param>
            <returns>Option security</returns>
            <exception cref="T:System.ArgumentException">Symbol is canonical (i.e. a generic Symbol returned from <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddFuture(System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal)"/> or <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddOption(System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal)"/>)</exception>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddOptionContract(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Boolean,System.Decimal)">
            <summary>
            Creates and adds a new single <see cref="T:QuantConnect.Securities.Option.Option"/> contract to the algorithm
            </summary>
            <param name="symbol">The option contract symbol</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice. Default is <value>true</value></param>
            <param name="leverage">The requested leverage for this equity. Default is set by <see cref="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer"/></param>
            <returns>The new <see cref="T:QuantConnect.Securities.Option.Option"/> security</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddForex(System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal)">
            <summary>
            Creates and adds a new <see cref="T:QuantConnect.Securities.Forex.Forex"/> security to the algorithm
            </summary>
            <param name="ticker">The currency pair</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="market">The foreign exchange trading market, <seealso cref="T:QuantConnect.Market"/>. Default value is null and looked up using BrokerageModel.DefaultMarkets in <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity``1(QuantConnect.SecurityType,System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal,System.Boolean)"/></param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice. Default is <value>true</value></param>
            <param name="leverage">The requested leverage for this equity. Default is set by <see cref="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer"/></param>
            <returns>The new <see cref="T:QuantConnect.Securities.Forex.Forex"/> security</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddCfd(System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal)">
            <summary>
            Creates and adds a new <see cref="T:QuantConnect.Securities.Cfd.Cfd"/> security to the algorithm
            </summary>
            <param name="ticker">The currency pair</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="market">The cfd trading market, <seealso cref="T:QuantConnect.Market"/>. Default value is null and looked up using BrokerageModel.DefaultMarkets in <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity``1(QuantConnect.SecurityType,System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal,System.Boolean)"/></param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice. Default is <value>true</value></param>
            <param name="leverage">The requested leverage for this equity. Default is set by <see cref="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer"/></param>
            <returns>The new <see cref="T:QuantConnect.Securities.Cfd.Cfd"/> security</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddCrypto(System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal)">
            <summary>
            Creates and adds a new <see cref="T:QuantConnect.Securities.Crypto.Crypto"/> security to the algorithm
            </summary>
            <param name="ticker">The currency pair</param>
            <param name="resolution">The <see cref="T:QuantConnect.Resolution"/> of market data, Tick, Second, Minute, Hour, or Daily. Default is <see cref="F:QuantConnect.Resolution.Minute"/></param>
            <param name="market">The cfd trading market, <seealso cref="T:QuantConnect.Market"/>. Default value is null and looked up using BrokerageModel.DefaultMarkets in <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity``1(QuantConnect.SecurityType,System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal,System.Boolean)"/></param>
            <param name="fillDataForward">If true, returns the last available data even if none in that timeslice. Default is <value>true</value></param>
            <param name="leverage">The requested leverage for this equity. Default is set by <see cref="P:QuantConnect.Algorithm.QCAlgorithm.SecurityInitializer"/></param>
            <returns>The new <see cref="T:QuantConnect.Securities.Crypto.Crypto"/> security</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RemoveOptionContract(QuantConnect.Symbol)">
            <summary>
            Removes the security with the specified symbol. This will cancel all
            open orders and then liquidate any existing holdings
            </summary>
            <param name="symbol">The symbol of the security to be removed</param>
            <remarks>Sugar syntax for <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddOptionContract(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Boolean,System.Decimal)"/></remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RemoveSecurity(QuantConnect.Symbol)">
            <summary>
            Removes the security with the specified symbol. This will cancel all
            open orders and then liquidate any existing holdings
            </summary>
            <param name="symbol">The symbol of the security to be removed</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData``1(System.String,System.Nullable{QuantConnect.Resolution})">
            <summary>
            AddData<typeparam name="T"/> a new user defined data source, requiring only the minimum config options.
            The data is added with a default time zone of NewYork (Eastern Daylight Savings Time)
            </summary>
            <param name="ticker">Key/Ticker for data</param>
            <param name="resolution">Resolution of the data</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
            <remarks>Generic type T must implement base data</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData``1(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution})">
            <summary>
            AddData<typeparam name="T"/> a new user defined data source, requiring only the minimum config options.
            The data is added with a default time zone of NewYork (Eastern Daylight Savings Time)
            </summary>
            <param name="underlying">The underlying symbol for the custom data</param>
            <param name="resolution">Resolution of the data</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
            <remarks>Generic type T must implement base data</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData``1(System.String,System.Nullable{QuantConnect.Resolution},System.Boolean,System.Decimal)">
            <summary>
            AddData<typeparam name="T"/> a new user defined data source, requiring only the minimum config options.
            The data is added with a default time zone of NewYork (Eastern Daylight Savings Time)
            </summary>
            <param name="ticker">Key/Ticker for data</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
            <remarks>Generic type T must implement base data</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData``1(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Boolean,System.Decimal)">
            <summary>
            AddData<typeparam name="T"/> a new user defined data source, requiring only the minimum config options.
            The data is added with a default time zone of NewYork (Eastern Daylight Savings Time)
            </summary>
            <param name="underlying">The underlying symbol for the custom data</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
            <remarks>Generic type T must implement base data</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData``1(System.String,System.Nullable{QuantConnect.Resolution},NodaTime.DateTimeZone,System.Boolean,System.Decimal)">
            <summary>
            AddData<typeparam name="T"/> a new user defined data source, requiring only the minimum config options.
            </summary>
            <param name="ticker">Key/Ticker for data</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="timeZone">Specifies the time zone of the raw data</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
            <remarks>Generic type T must implement base data</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData``1(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},NodaTime.DateTimeZone,System.Boolean,System.Decimal)">
            <summary>
            AddData<typeparam name="T"/> a new user defined data source, requiring only the minimum config options.
            </summary>
            <param name="underlying">The underlying symbol for the custom data</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="timeZone">Specifies the time zone of the raw data</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
            <remarks>Generic type T must implement base data</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData``1(System.String,QuantConnect.Securities.SymbolProperties,QuantConnect.Securities.SecurityExchangeHours,System.Nullable{QuantConnect.Resolution},System.Boolean,System.Decimal)">
            <summary>
            AddData<typeparam name="T"/> a new user defined data source including symbol properties and exchange hours,
            all other vars are not required and will use defaults.
            </summary>
            <param name="ticker">Key/Ticker for data</param>
            <param name="properties">The properties of this new custom data</param>
            <param name="exchangeHours">The Exchange hours of this symbol</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.String)">
            <summary>
            Send a debug message to the web console:
            </summary>
            <param name="message">Message to send to debug console</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.String)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.Int32)">
            <summary>
            Send a debug message to the web console:
            </summary>
            <param name="message">Message to send to debug console</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.Int32)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.Int32)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.Double)">
            <summary>
            Send a debug message to the web console:
            </summary>
            <param name="message">Message to send to debug console</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.Double)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.Double)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.Decimal)">
            <summary>
            Send a debug message to the web console:
            </summary>
            <param name="message">Message to send to debug console</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.Decimal)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.String)">
            <summary>
            Added another method for logging if user guessed.
            </summary>
            <param name="message">String message to log.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.String)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.Int32)">
            <summary>
            Added another method for logging if user guessed.
            </summary>
            <param name="message">Int message to log.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.Int32)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.Int32)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.Double)">
            <summary>
            Added another method for logging if user guessed.
            </summary>
            <param name="message">Double message to log.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.Double)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.Double)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.Decimal)">
            <summary>
            Added another method for logging if user guessed.
            </summary>
            <param name="message">Decimal message to log.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.Decimal)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.String)">
            <summary>
            Send a string error message to the Console.
            </summary>
            <param name="message">Message to display in errors grid</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.String)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.Int32)">
            <summary>
            Send a int error message to the Console.
            </summary>
            <param name="message">Message to display in errors grid</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.Int32)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.Int32)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.Double)">
            <summary>
            Send a double error message to the Console.
            </summary>
            <param name="message">Message to display in errors grid</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.Double)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.Double)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.Decimal)">
            <summary>
            Send a decimal error message to the Console.
            </summary>
            <param name="message">Message to display in errors grid</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.Decimal)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Error(System.Exception)">
            <summary>
            Send a string error message to the Console.
            </summary>
            <param name="error">Exception object captured from a try catch loop</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(System.String)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Quit(System.String)">
            <summary>
            Terminate the algorithm after processing the current event handler.
            </summary>
            <param name="message">Exit message to display on quitting</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetQuit(System.Boolean)">
            <summary>
            Set the Quit flag property of the algorithm.
            </summary>
            <remarks>Intended for internal use by the QuantConnect Lean Engine only.</remarks>
            <param name="quit">Boolean quit state</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Quit(System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Symbol(System.String)">
            <summary>
            Converts the string 'ticker' symbol into a full <see cref="M:QuantConnect.Algorithm.QCAlgorithm.Symbol(System.String)"/> object
            This requires that the string 'ticker' has been added to the algorithm
            </summary>
            <param name="ticker">The ticker symbol. This should be the ticker symbol
            as it was added to the algorithm</param>
            <returns>The symbol object mapped to the specified ticker</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddSecurity``1(QuantConnect.SecurityType,System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal,System.Boolean)">
            <summary>
            Creates and adds a new <see cref="T:QuantConnect.Securities.Security"/> to the algorithm
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetHistoryProvider(QuantConnect.Interfaces.IHistoryProvider)">
            <summary>
            Set the historical data provider
            </summary>
            <param name="historyProvider">Historical data provider</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRunTimeError(System.Exception)">
            <summary>
            Set the runtime error
            </summary>
            <param name="exception">Represents error that occur during execution</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetStatus(QuantConnect.AlgorithmStatus)">
            <summary>
            Set the state of a live deployment
            </summary>
            <param name="status">Live deployment status</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Download(System.String)">
            <summary>
            Downloads the requested resource as a <see cref="T:System.String"/>.
            The resource to download is specified as a <see cref="T:System.String"/> containing the URI.
            </summary>
            <param name="address">A string containing the URI to download</param>
            <returns>The requested resource as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Download(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Downloads the requested resource as a <see cref="T:System.String"/>.
            The resource to download is specified as a <see cref="T:System.String"/> containing the URI.
            </summary>
            <param name="address">A string containing the URI to download</param>
            <param name="headers">Defines header values to add to the request</param>
            <returns>The requested resource as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Download(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String)">
            <summary>
            Downloads the requested resource as a <see cref="T:System.String"/>.
            The resource to download is specified as a <see cref="T:System.String"/> containing the URI.
            </summary>
            <param name="address">A string containing the URI to download</param>
            <param name="headers">Defines header values to add to the request</param>
            <param name="userName">The user name associated with the credentials</param>
            <param name="password">The password for the user name associated with the credentials</param>
            <returns>The requested resource as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Train(System.Action)">
            <summary>
            Schedules the provided training code to execute immediately
            </summary>
            <param name="trainingCode">The training code to be invoked</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Train(QuantConnect.Scheduling.IDateRule,QuantConnect.Scheduling.ITimeRule,System.Action)">
            <summary>
            Schedules the training code to run using the specified date and time rules
            </summary>
            <param name="dateRule">Specifies what dates the event should run</param>
            <param name="timeRule">Specifies the times on those dates the event should run</param>
            <param name="trainingCode">The training code to be invoked</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnInsightsGenerated(QuantConnect.Algorithm.Framework.Alphas.Insight[],System.Boolean)">
            <summary>
            Event invocator for the <see cref="E:QuantConnect.Algorithm.QCAlgorithm.InsightsGenerated"/> event
            </summary>
            <param name="insights">The collection of insights generaed at the current time step</param>
            <param name="clone">Will emit a clone of the generated insights</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetCurrentSlice(QuantConnect.Data.Slice)">
            <summary>
            Sets the current slice
            </summary>
            <param name="slice">The Slice object</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetApi(QuantConnect.Interfaces.IApi)">
            <summary>
            Provide the API for the algorithm.
            </summary>
            <param name="api">Initiated API</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetObjectStore(QuantConnect.Interfaces.IObjectStore)">
            <summary>
            Sets the object store
            </summary>
            <param name="objectStore">The object store</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Shortable(QuantConnect.Symbol)">
            <summary>
            Determines if the Symbol is shortable at the brokerage
            </summary>
            <param name="symbol">Symbol to check if shortable</param>
            <returns>True if shortable</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Shortable(QuantConnect.Symbol,System.Decimal)">
            <summary>
            Determines if the Symbol is shortable at the brokerage
            </summary>
            <param name="symbol">Symbol to check if shortable</param>
            <param name="shortQuantity">Order's quantity to check if it is currently shortable, taking into account current holdings and open orders</param>
            <returns>True if shortable</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ShortableQuantity(QuantConnect.Symbol)">
            <summary>
            Gets the quantity shortable for the given asset
            </summary>
            <returns>
            Quantity shortable for the given asset. Zero if not
            shortable, or a number greater than zero if shortable.
            </returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AllShortableSymbols">
            <summary>
            Gets all Symbols that are shortable, as well as the quantity shortable for them
            </summary>
            <returns>All shortable Symbols, null if all Symbols are shortable</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QuantConnect.Algorithm.QCAlgorithm.SetDatabaseEntries(System.String,QuantConnect.Securities.SymbolProperties,QuantConnect.Securities.SecurityExchangeHours)" -->
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.DebugMode">
            <summary>
            Enables additional logging of framework models including:
            All insights, portfolio targets, order events, and any risk management altered targets
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSelection">
            <summary>
            Gets or sets the universe selection model.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Alpha">
            <summary>
            Gets or sets the alpha model
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.PortfolioConstruction">
            <summary>
            Gets or sets the portfolio construction model
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Execution">
            <summary>
            Gets or sets the execution model
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.RiskManagement">
            <summary>
            Gets or sets the risk management model
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.FrameworkPostInitialize">
            <summary>
            Called by setup handlers after Initialize and allows the algorithm a chance to organize
            the data gather in the Initialize method
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnFrameworkData(QuantConnect.Data.Slice)">
            <summary>
            Used to send data updates to algorithm framework models
            </summary>
            <param name="slice">The current data slice</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ProcessInsights(QuantConnect.Algorithm.Framework.Alphas.Insight[])">
            <summary>
            They different framework models will process the new provided insight.
            The <see cref="T:QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel"/> will create targets,
            the <see cref="T:QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel"/> will adjust the targets
            and the <see cref="T:QuantConnect.Algorithm.Framework.Execution.IExecutionModel"/> will execute the <see cref="T:QuantConnect.Algorithm.Framework.Portfolio.IPortfolioTarget"/>
            </summary>
            <param name="insights">The insight to process</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnFrameworkSecuritiesChanged(QuantConnect.Data.UniverseSelection.SecurityChanges)">
            <summary>
            Used to send security changes to algorithm framework models
            </summary>
            <param name="changes">Security additions/removals for this time step</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetUniverseSelection(QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel)">
            <summary>
            Sets the universe selection model
            </summary>
            <param name="universeSelection">Model defining universes for the algorithm</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverseSelection(QuantConnect.Algorithm.Framework.Selection.IUniverseSelectionModel)">
            <summary>
            Adds a new universe selection model
            </summary>
            <param name="universeSelection">Model defining universes for the algorithm to add</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetAlpha(QuantConnect.Algorithm.Framework.Alphas.IAlphaModel)">
            <summary>
            Sets the alpha model
            </summary>
            <param name="alpha">Model that generates alpha</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddAlpha(QuantConnect.Algorithm.Framework.Alphas.IAlphaModel)">
            <summary>
            Adds a new alpha model
            </summary>
            <param name="alpha">Model that generates alpha to add</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetPortfolioConstruction(QuantConnect.Algorithm.Framework.Portfolio.IPortfolioConstructionModel)">
            <summary>
            Sets the portfolio construction model
            </summary>
            <param name="portfolioConstruction">Model defining how to build a portfolio from insights</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetExecution(QuantConnect.Algorithm.Framework.Execution.IExecutionModel)">
            <summary>
            Sets the execution model
            </summary>
            <param name="execution">Model defining how to execute trades to reach a portfolio target</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRiskManagement(QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel)">
            <summary>
            Sets the risk management model
            </summary>
            <param name="riskManagement">Model defining how risk is managed</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddRiskManagement(QuantConnect.Algorithm.Framework.Risk.IRiskManagementModel)">
            <summary>
            Adds a new risk management model
            </summary>
            <param name="riskManagement">Model defining how risk is managed to add</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.EmitInsights(QuantConnect.Algorithm.Framework.Alphas.Insight[])">
            <summary>
            Manually emit insights from an algorithm.
            This is typically invoked before calls to submit orders in algorithms written against
            QCAlgorithm that have been ported into the algorithm framework.
            </summary>
            <param name="insights">The array of insights to be emitted</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.EmitInsights(QuantConnect.Algorithm.Framework.Alphas.Insight)">
            <summary>
            Manually emit insights from an algorithm.
            This is typically invoked before calls to submit orders in algorithms written against
            QCAlgorithm that have been ported into the algorithm framework.
            </summary>
            <param name="insight">The insight to be emitted</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.InitializeInsights(QuantConnect.Algorithm.Framework.Alphas.Insight[])">
            <summary>
            Helper method used to validate insights and prepare them to be emitted
            </summary>
            <param name="insights">insights preparing to be emitted</param>
            <returns>Validated insights</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.InitializeInsightFields(QuantConnect.Algorithm.Framework.Alphas.Insight)">
            <summary>
            Helper class used to set values not required to be set by alpha models
            </summary>
            <param name="insight">The <see cref="T:QuantConnect.Algorithm.Framework.Alphas.Insight"/> to set the values for</param>
            <returns>The same <see cref="T:QuantConnect.Algorithm.Framework.Alphas.Insight"/> instance with the values set</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetAlpha(Python.Runtime.PyObject)">
            <summary>
            Sets the alpha model
            </summary>
            <param name="alpha">Model that generates alpha</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddAlpha(Python.Runtime.PyObject)">
            <summary>
            Adds a new alpha model
            </summary>
            <param name="alpha">Model that generates alpha to add</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetExecution(Python.Runtime.PyObject)">
            <summary>
            Sets the execution model
            </summary>
            <param name="execution">Model defining how to execute trades to reach a portfolio target</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetPortfolioConstruction(Python.Runtime.PyObject)">
            <summary>
            Sets the portfolio construction model
            </summary>
            <param name="portfolioConstruction">Model defining how to build a portfolio from alphas</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetUniverseSelection(Python.Runtime.PyObject)">
            <summary>
            Sets the universe selection model
            </summary>
            <param name="universeSelection">Model defining universes for the algorithm</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverseSelection(Python.Runtime.PyObject)">
            <summary>
            Adds a new universe selection model
            </summary>
            <param name="universeSelection">Model defining universes for the algorithm to add</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRiskManagement(Python.Runtime.PyObject)">
            <summary>
            Sets the risk management model
            </summary>
            <param name="riskManagement">Model defining how risk is managed</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddRiskManagement(Python.Runtime.PyObject)">
            <summary>
            Adds a new risk management model
            </summary>
            <param name="riskManagement">Model defining how risk is managed to add</param>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.HistoryProvider">
            <summary>
            Gets or sets the history provider for the algorithm
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.IsWarmingUp">
            <summary>
            Gets whether or not this algorithm is still warming up
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.TimeSpan)">
            <summary>
            Sets the warm up period to the specified value
            </summary>
            <param name="timeSpan">The amount of time to warm up, this does not take into account market hours/weekends</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(System.TimeSpan)">
            <summary>
            Sets the warm up period to the specified value
            </summary>
            <param name="timeSpan">The amount of time to warm up, this does not take into account market hours/weekends</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Sets the warm up period to the specified value
            </summary>
            <param name="timeSpan">The amount of time to warm up, this does not take into account market hours/weekends</param>
            <param name="resolution">The resolution to request</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Sets the warm up period to the specified value
            </summary>
            <param name="timeSpan">The amount of time to warm up, this does not take into account market hours/weekends</param>
            <param name="resolution">The resolution to request</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.Int32)">
            <summary>
            Sets the warm up period by resolving a start date that would send that amount of data into
            the algorithm. The highest (smallest) resolution in the securities collection will be used.
            For example, if an algorithm has minute and daily data and 200 bars are requested, that would
            use 200 minute bars.
            </summary>
            <param name="barCount">The number of data points requested for warm up</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(System.Int32)">
            <summary>
            Sets the warm up period by resolving a start date that would send that amount of data into
            the algorithm. The highest (smallest) resolution in the securities collection will be used.
            For example, if an algorithm has minute and daily data and 200 bars are requested, that would
            use 200 minute bars.
            </summary>
            <param name="barCount">The number of data points requested for warm up</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmup(System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Sets the warm up period by resolving a start date that would send that amount of data into
            the algorithm.
            </summary>
            <param name="barCount">The number of data points requested for warm up</param>
            <param name="resolution">The resolution to request</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetWarmUp(System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Sets the warm up period by resolving a start date that would send that amount of data into
            the algorithm.
            </summary>
            <param name="barCount">The number of data points requested for warm up</param>
            <param name="resolution">The resolution to request</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetFinishedWarmingUp">
            <summary>
            Sets <see cref="P:QuantConnect.Interfaces.IAlgorithm.IsWarmingUp"/> to false to indicate this algorithm has finished its warm up
            </summary>
        </member>
        <member name="F:QuantConnect.Algorithm.QCAlgorithm._symbolEmptyErrorMessage">
            <summary>
            Message for exception that is thrown when the implicit conversion between symbol and string fails
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetWarmupHistoryRequests">
            <summary>
            Gets the history requests required for provide warm up data for the algorithm
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Get the history for all configured securities over the requested span.
            This will use the resolution and other subscription settings for each security.
            The symbols must exist in the Securities collection.
            </summary>
            <param name="span">The span over which to request data. This is a calendar span, so take into consideration weekends and such</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing data over the most recent span for all configured securities</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Get the history for all configured securities over the requested span.
            This will use the resolution and other subscription settings for each security.
            The symbols must exist in the Securities collection.
            </summary>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing data over the most recent span for all configured securities</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for all symbols of the requested type over the requested span.
            The symbol's configured values for resolution and fill forward behavior will be used
            The symbols must exist in the Securities collection.
            </summary>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols over the requested span.
            The symbols must exist in the Securities collection.
            </summary>
            <typeparam name="T">The data type of the symbols</typeparam>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols. The exact number of bars will be returned for
            each symbol. This may result in some data start earlier/later than others due to when various
            exchanges are open. The symbols must exist in the Securities collection.
            </summary>
            <typeparam name="T">The data type of the symbols</typeparam>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols between the specified dates. The symbols must exist in the Securities collection.
            </summary>
            <typeparam name="T">The data type of the symbols</typeparam>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="start">The start time in the algorithm's time zone</param>
            <param name="end">The end time in the algorithm's time zone</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(QuantConnect.Symbol,System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol over the request span. The symbol must exist in the Securities collection.
            </summary>
            <typeparam name="T">The data type of the symbol</typeparam>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol. The exact number of bars will be returned.
            The symbol must exist in the Securities collection.
            </summary>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol. The exact number of bars will be returned.
            The symbol must exist in the Securities collection.
            </summary>
            <typeparam name="T">The data type of the symbol</typeparam>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History``1(QuantConnect.Symbol,System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol between the specified dates. The symbol must exist in the Securities collection.
            </summary>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="start">The start time in the algorithm's time zone</param>
            <param name="end">The end time in the algorithm's time zone</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol,System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol over the request span. The symbol must exist in the Securities collection.
            </summary>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Symbol,System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol over the request span. The symbol must exist in the Securities collection.
            </summary>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="start">The start time in the algorithm's time zone</param>
            <param name="end">The end time in the algorithm's time zone</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols over the requested span.
            The symbol's configured values for resolution and fill forward behavior will be used
            The symbols must exist in the Securities collection.
            </summary>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols. The exact number of bars will be returned for
            each symbol. This may result in some data start earlier/later than others due to when various
            exchanges are open. The symbols must exist in the Securities collection.
            </summary>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Gets the historical data for the specified symbols between the specified dates. The symbols must exist in the Securities collection.
            </summary>
            <param name="symbols">The symbols to retrieve historical data for</param>
            <param name="start">The start time in the algorithm's time zone</param>
            <param name="end">The end time in the algorithm's time zone</param>
            <param name="resolution">The resolution to request</param>
            <param name="fillForward">True to fill forward missing data, false otherwise</param>
            <param name="extendedMarket">True to include extended market hours data, false otherwise</param>
            <returns>An enumerable of slice containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(QuantConnect.Data.HistoryRequest)">
            <summary>
            Executes the specified history request
            </summary>
            <param name="request">the history request to execute</param>
            <returns>An enumerable of slice satisfying the specified history request</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(System.Collections.Generic.IEnumerable{QuantConnect.Data.HistoryRequest})">
            <summary>
            Executes the specified history requests
            </summary>
            <param name="requests">the history requests to execute</param>
            <returns>An enumerable of slice satisfying the specified history request</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetLastKnownPrice(QuantConnect.Securities.Security)">
            <summary>
            Get the last known price using the history provider.
            Useful for seeding securities with the correct price
            </summary>
            <param name="security"><see cref="T:QuantConnect.Securities.Security"/> object for which to retrieve historical data</param>
            <returns>A single <see cref="T:QuantConnect.Data.BaseData"/> object with the last known price</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CreateDateRangeHistoryRequests(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Helper method to create history requests from a date range
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CreateBarCountHistoryRequests(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Helper methods to create a history request for the specified symbols and bar count
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.EnableAutomaticIndicatorWarmUp">
            <summary>
            Gets whether or not WarmUpIndicator is allowed to warm up indicators/>
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ABANDS(QuantConnect.Symbol,System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new Acceleration Bands indicator.
            </summary>
            <param name="symbol">The symbol whose Acceleration Bands we want.</param>
            <param name="period">The period of the three moving average (middle, upper and lower band).</param>
            <param name="width">A coefficient specifying the distance between the middle band and upper or lower bands.</param>
            <param name="movingAverageType">Type of the moving average.</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar.</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AD(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new AccumulationDistribution indicator.
            </summary>
            <param name="symbol">The symbol whose AD we want</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The AccumulationDistribution indicator for the requested symbol over the speified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ADOSC(QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new AccumulationDistributionOscillator indicator.
            </summary>
            <param name="symbol">The symbol whose ADOSC we want</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The AccumulationDistributionOscillator indicator for the requested symbol over the speified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ARIMA(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Creates a new ARIMA indicator.
            </summary>
            <param name="symbol">The symbol whose ARIMA indicator we want</param>
            <param name="arOrder">AR order (p) -- defines the number of past values to consider in the AR component of the model.</param>
            <param name="diffOrder">Difference order (d) -- defines how many times to difference the model before fitting parameters.</param>
            <param name="maOrder">MA order (q) -- defines the number of past values to consider in the MA component of the model.</param>
            <param name="period">Size of the rolling series to fit onto</param>
            <param name="resolution">The resolution</param>
            <returns>The ARIMA indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ADX(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new Average Directional Index indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose Average Directional Index we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="period">The period over which to compute the Average Directional Index</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The Average Directional Index indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AO(QuantConnect.Symbol,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new Awesome Oscillator from the specified periods.
            </summary>
            <param name="symbol">The symbol whose Awesome Oscillator we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="fastPeriod">The period of the fast moving average associated with the AO</param>
            <param name="slowPeriod">The period of the slow moving average associated with the AO</param>
            <param name="type">The type of moving average used when computing the fast and slow term. Defaults to simple moving average.</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ADXR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new AverageDirectionalMovementIndexRating indicator.
            </summary>
            <param name="symbol">The symbol whose ADXR we want</param>
            <param name="period">The period over which to compute the ADXR</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The AverageDirectionalMovementIndexRating indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ALMA(QuantConnect.Symbol,System.Int32,System.Int32,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new ArnaudLegouxMovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose ALMA we want</param>
            <param name="period">int - the number of periods to calculate the ALMA</param>
            <param name="sigma"> int - this parameter is responsible for the shape of the curve coefficients.
            </param>
            <param name="offset">
            decimal - This parameter allows regulating the smoothness and high sensitivity of the
            Moving Average. The range for this parameter is [0, 1].
            </param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The ArnaudLegouxMovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.APO(QuantConnect.Symbol,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new AbsolutePriceOscillator indicator.
            </summary>
            <param name="symbol">The symbol whose APO we want</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The AbsolutePriceOscillator indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AROON(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new AroonOscillator indicator which will compute the AroonUp and AroonDown (as well as the delta)
            </summary>
            <param name="symbol">The symbol whose Aroon we seek</param>
            <param name="period">The look back period for computing number of periods since maximum and minimum</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>An AroonOscillator configured with the specied periods</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AROON(QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new AroonOscillator indicator which will compute the AroonUp and AroonDown (as well as the delta)
            </summary>
            <param name="symbol">The symbol whose Aroon we seek</param>
            <param name="upPeriod">The look back period for computing number of periods since maximum</param>
            <param name="downPeriod">The look back period for computing number of periods since minimum</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>An AroonOscillator configured with the specified periods</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ATR(QuantConnect.Symbol,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new AverageTrueRange indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose ATR we want</param>
            <param name="period">The smoothing period used to smooth the computed TrueRange values</param>
            <param name="type">The type of smoothing to use</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>A new AverageTrueRange indicator with the specified smoothing type and period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.BB(QuantConnect.Symbol,System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new BollingerBands indicator which will compute the MiddleBand, UpperBand, LowerBand, and StandardDeviation
            </summary>
            <param name="symbol">The symbol whose BollingerBands we seek</param>
            <param name="period">The period of the standard deviation and moving average (middle band)</param>
            <param name="k">The number of standard deviations specifying the distance between the middle band and upper or lower bands</param>
            <param name="movingAverageType">The type of moving average to be used</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>A BollingerBands configured with the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.BOP(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new Balance Of Power indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose Balance Of Power we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The Balance Of Power indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CC(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CoppockCurve"/> indicator
            </summary>
            <param name="symbol">The symbol whose Coppock Curve we want</param>
            <param name="shortRocPeriod">The period for the short ROC</param>
            <param name="longRocPeriod">The period for the long ROC</param>
            <param name="lwmaPeriod">The period for the LWMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The Coppock Curve indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CCI(QuantConnect.Symbol,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new CommodityChannelIndex indicator. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose CCI we want</param>
            <param name="period">The period over which to compute the CCI</param>
            <param name="movingAverageType">The type of moving average to use in computing the typical price average</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The CommodityChannelIndex indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CMF(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new ChaikinMoneyFlow indicator.
            </summary>
            <param name="symbol">The symbol whose CMF we want</param>
            <param name="period">The period over which to compute the CMF</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The ChaikinMoneyFlow indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CMO(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new ChandeMomentumOscillator indicator.
            </summary>
            <param name="symbol">The symbol whose CMO we want</param>
            <param name="period">The period over which to compute the CMO</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The ChandeMomentumOscillator indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.DEM(QuantConnect.Symbol,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
             Creates a new DeMarker Indicator (DEM), an oscillator-type indicator measuring changes in terms of an asset's
             High and Low tradebar values. 
            </summary>
             <param name="symbol">The symbol whose DEM we seek.</param>
             <param name="period">The period of the moving average implemented</param>
             <param name="movingAverageType">Specifies the type of moving average to be used</param>
             <param name="resolution">The resolution.</param>
             <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
             <returns>The DeMarker indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.DCH(QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new Donchian Channel indicator which will compute the Upper Band and Lower Band.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose Donchian Channel we seek.</param>
            <param name="upperPeriod">The period over which to compute the upper Donchian Channel.</param>
            <param name="lowerPeriod">The period over which to compute the lower Donchian Channel.</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The Donchian Channel indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.DCH(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Overload shorthand to create a new symmetric Donchian Channel indicator which
            has the upper and lower channels set to the same period length.
            </summary>
            <param name="symbol">The symbol whose Donchian Channel we seek.</param>
            <param name="period">The period over which to compute the Donchian Channel.</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The Donchian Channel indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.DEMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new DoubleExponentialMovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose DEMA we want</param>
            <param name="period">The period over which to compute the DEMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The DoubleExponentialMovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.DPO(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.DetrendedPriceOscillator"/> indicator.
            </summary>
            <param name="symbol">The symbol whose DPO we want</param>
            <param name="period">The period over which to compute the DPO</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>A new registered DetrendedPriceOscillator indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.EMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates an ExponentialMovingAverage indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose EMA we want</param>
            <param name="period">The period of the EMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The ExponentialMovingAverage for the given parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.EMA(QuantConnect.Symbol,System.Int32,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates an ExponentialMovingAverage indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose EMA we want</param>
            <param name="period">The period of the EMA</param>
            <param name="smoothingFactor">The percentage of data from the previous value to be carried into the next value</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The ExponentialMovingAverage for the given parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.EMV(QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates an EaseOfMovementValue indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose EMV we want</param>
            <param name="period">The period of the EMV</param>
            <param name="scale">The length of the outputed value</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The EaseOfMovementValue indicator for the given parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.FilteredIdentity(QuantConnect.Symbol,System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar},System.Func{QuantConnect.Data.IBaseData,System.Boolean},System.String)">
            <summary>
            Creates a new FilteredIdentity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="filter">Filters the IBaseData send into the indicator, if null defaults to true (x => true) which means no filter</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new FilteredIdentity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.FilteredIdentity(QuantConnect.Symbol,QuantConnect.Resolution,System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar},System.Func{QuantConnect.Data.IBaseData,System.Boolean},System.String)">
            <summary>
            Creates a new FilteredIdentity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="resolution">The desired resolution of the data</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="filter">Filters the IBaseData send into the indicator, if null defaults to true (x => true) which means no filter</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new FilteredIdentity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.FilteredIdentity(QuantConnect.Symbol,System.TimeSpan,System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar},System.Func{QuantConnect.Data.IBaseData,System.Boolean},System.String)">
            <summary>
            Creates a new FilteredIdentity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="resolution">The desired resolution of the data</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="filter">Filters the IBaseData send into the indicator, if null defaults to true (x => true) which means no filter</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new FilteredIdentity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.FISH(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates an FisherTransform indicator for the symbol.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose FisherTransform we want</param>
            <param name="period">The period of the FisherTransform</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The FisherTransform for the given parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.FRAMA(QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates an FractalAdaptiveMovingAverage (FRAMA) indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose FRAMA we want</param>
            <param name="period">The period of the FRAMA</param>
            <param name="longPeriod">The long period of the FRAMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The FRAMA for the given parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.HeikinAshi(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new Heikin-Ashi indicator.
            </summary>
            <param name="symbol">The symbol whose Heikin-Ashi we want</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Heikin-Ashi indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.HMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new HullMovingAverage indicator. The Hull moving average is a series of nested weighted moving averages, is fast and smooth.
            </summary>
            <param name="symbol">The symbol whose Hull moving average we want</param>
            <param name="period">The period over which to compute the Hull moving average</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ICHIMOKU(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Creates a new IchimokuKinkoHyo indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose ICHIMOKU we want</param>
            <param name="tenkanPeriod">The period to calculate the Tenkan-sen period</param>
            <param name="kijunPeriod">The period to calculate the Kijun-sen period</param>
            <param name="senkouAPeriod">The period to calculate the Tenkan-sen period</param>
            <param name="senkouBPeriod">The period to calculate the Tenkan-sen period</param>
            <param name="senkouADelayPeriod">The period to calculate the Tenkan-sen period</param>
            <param name="senkouBDelayPeriod">The period to calculate the Tenkan-sen period</param>
            <param name="resolution">The resolution</param>
            <returns>A new IchimokuKinkoHyo indicator with the specified periods and delays</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Identity(QuantConnect.Symbol,System.Func{QuantConnect.Data.IBaseData,System.Decimal},System.String)">
            <summary>
            Creates a new Identity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new Identity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Identity(QuantConnect.Symbol,QuantConnect.Resolution,System.Func{QuantConnect.Data.IBaseData,System.Decimal},System.String)">
            <summary>
            Creates a new Identity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="resolution">The desired resolution of the data</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new Identity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Identity(QuantConnect.Symbol,System.TimeSpan,System.Func{QuantConnect.Data.IBaseData,System.Decimal},System.String)">
            <summary>
            Creates a new Identity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="resolution">The desired resolution of the data</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new Identity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.KAMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new KaufmanAdaptiveMovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose KAMA we want</param>
            <param name="period">The period of the Efficiency Ratio (ER) of KAMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The KaufmanAdaptiveMovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.KAMA(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new KaufmanAdaptiveMovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose KAMA we want</param>
            <param name="period">The period of the Efficiency Ratio (ER)</param>
            <param name="fastEmaPeriod">The period of the fast EMA used to calculate the Smoothing Constant (SC)</param>
            <param name="slowEmaPeriod">The period of the slow EMA used to calculate the Smoothing Constant (SC)</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The KaufmanAdaptiveMovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.KCH(QuantConnect.Symbol,System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new Keltner Channels indicator.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose Keltner Channel we seek</param>
            <param name="period">The period over which to compute the Keltner Channels</param>
            <param name="k">The number of multiples of the <see cref="T:QuantConnect.Indicators.AverageTrueRange"/> from the middle band of the Keltner Channels</param>
            <param name="movingAverageType">Specifies the type of moving average to be used as the middle line of the Keltner Channel</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The Keltner Channel indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.LOGR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new LogReturn indicator.
            </summary>
            <param name="symbol">The symbol whose log return we seek</param>
            <param name="period">The period of the log return.</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar.</param>
            <returns>log return indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.LSMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates and registers a new Least Squares Moving Average instance.
            </summary>
            <param name="symbol">The symbol whose LSMA we seek.</param>
            <param name="period">The LSMA period. Normally 14.</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar.</param>
            <returns>A LeastSquaredMovingAverage configured with the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.LWMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new LinearWeightedMovingAverage indicator.  This indicator will linearly distribute
            the weights across the periods.
            </summary>
            <param name="symbol">The symbol whose LWMA we want</param>
            <param name="period">The period over which to compute the LWMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MACD(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a MACD indicator for the symbol. The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose MACD we want</param>
            <param name="fastPeriod">The period for the fast moving average</param>
            <param name="slowPeriod">The period for the slow moving average</param>
            <param name="signalPeriod">The period for the signal moving average</param>
            <param name="type">The type of moving average to use for the MACD</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The moving average convergence divergence between the fast and slow averages</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MAD(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new MeanAbsoluteDeviation indicator.
            </summary>
            <param name="symbol">The symbol whose MeanAbsoluteDeviation we want</param>
            <param name="period">The period over which to compute the MeanAbsoluteDeviation</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The MeanAbsoluteDeviation indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MAX(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new Maximum indicator to compute the maximum value
            </summary>
            <param name="symbol">The symbol whose max we want</param>
            <param name="period">The look back period over which to compute the max value</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null and the symbol is of type TradeBar defaults to the High property,
            otherwise it defaults to Value property of BaseData (x => x.Value)</param>
            <returns>A Maximum indicator that compute the max value and the periods since the max value</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MFI(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new MoneyFlowIndex indicator. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose MFI we want</param>
            <param name="period">The period over which to compute the MFI</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The MoneyFlowIndex indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MASS(QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new Mass Index indicator. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose Mass Index we want.</param>
            <param name="emaPeriod">The period used by both EMA.</param>
            <param name="sumPeriod">The sum period.</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Mass Index indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MIDPOINT(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new MidPoint indicator.
            </summary>
            <param name="symbol">The symbol whose MIDPOINT we want</param>
            <param name="period">The period over which to compute the MIDPOINT</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The MidPoint indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MIDPRICE(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new MidPrice indicator.
            </summary>
            <param name="symbol">The symbol whose MIDPRICE we want</param>
            <param name="period">The period over which to compute the MIDPRICE</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The MidPrice indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MIN(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new Minimum indicator to compute the minimum value
            </summary>
            <param name="symbol">The symbol whose min we want</param>
            <param name="period">The look back period over which to compute the min value</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null and the symbol is of type TradeBar defaults to the Low property,
            otherwise it defaults to Value property of BaseData (x => x.Value)</param>
            <returns>A Minimum indicator that compute the in value and the periods since the min value</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MOM(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new Momentum indicator. This will compute the absolute n-period change in the security.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose momentum we want</param>
            <param name="period">The period over which to compute the momentum</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The momentum indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MOMERSION(QuantConnect.Symbol,System.Nullable{System.Int32},System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new Momersion indicator.
            </summary>
            <param name="symbol">The symbol whose Momersion we want</param>
            <param name="minPeriod">The minimum period over which to compute the Momersion. Must be greater than 3. If null, only full period will be used in computations.</param>
            <param name="fullPeriod">The full period over which to compute the Momersion</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Momersion indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MOMP(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new MomentumPercent indicator. This will compute the n-period percent change in the security.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose momentum we want</param>
            <param name="period">The period over which to compute the momentum</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The momentum indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.NATR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new NormalizedAverageTrueRange indicator.
            </summary>
            <param name="symbol">The symbol whose NATR we want</param>
            <param name="period">The period over which to compute the NATR</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The NormalizedAverageTrueRange indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OBV(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new On Balance Volume indicator. This will compute the cumulative total volume
            based on whether the close price being higher or lower than the previous period.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose On Balance Volume we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>The On Balance Volume indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PPO(QuantConnect.Symbol,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new PercentagePriceOscillator indicator.
            </summary>
            <param name="symbol">The symbol whose PPO we want</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The PercentagePriceOscillator indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PSAR(QuantConnect.Symbol,System.Decimal,System.Decimal,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new Parabolic SAR indicator
            </summary>
            <param name="symbol">The symbol whose PSAR we seek</param>
            <param name="afStart">Acceleration factor start value. Normally 0.02</param>
            <param name="afIncrement">Acceleration factor increment value. Normally 0.02</param>
            <param name="afMax">Acceleration factor max value. Normally 0.2</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to casting the input value to a TradeBar</param>
            <returns>A ParabolicStopAndReverse configured with the specified periods</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RC(QuantConnect.Symbol,System.Int32,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new RegressionChannel indicator which will compute the LinearRegression, UpperChannel and LowerChannel lines, the intercept and slope
            </summary>
            <param name="symbol">The symbol whose RegressionChannel we seek</param>
            <param name="period">The period of the standard deviation and least square moving average (linear regression line)</param>
            <param name="k">The number of standard deviations specifying the distance between the linear regression and upper or lower channel lines</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>A Regression Channel configured with the specified period and number of standard deviation</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ROC(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new RateOfChange indicator. This will compute the n-period rate of change in the security.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose RateOfChange we want</param>
            <param name="period">The period over which to compute the RateOfChange</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The RateOfChange indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ROCP(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new RateOfChangePercent indicator. This will compute the n-period percentage rate of change in the security.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose RateOfChangePercent we want</param>
            <param name="period">The period over which to compute the RateOfChangePercent</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The RateOfChangePercent indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ROCR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new RateOfChangeRatio indicator.
            </summary>
            <param name="symbol">The symbol whose ROCR we want</param>
            <param name="period">The period over which to compute the ROCR</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The RateOfChangeRatio indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RSI(QuantConnect.Symbol,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new RelativeStrengthIndex indicator. This will produce an oscillator that ranges from 0 to 100 based
            on the ratio of average gains to average losses over the specified period.
            </summary>
            <param name="symbol">The symbol whose RSI we want</param>
            <param name="period">The period over which to compute the RSI</param>
            <param name="movingAverageType">The type of moving average to use in computing the average gain/loss values</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The RelativeStrengthIndex indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RVI(QuantConnect.Symbol,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates a new RelativeVigorIndex indicator.
            </summary>
            <param name="symbol">The symbol whose RVI we want</param>
            <param name="period">The period over which to compute the RVI</param>
            <param name="movingAverageType">The type of moving average to use</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The RelativeVigorIndex indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates an SimpleMovingAverage indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose SMA we want</param>
            <param name="period">The period of the SMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The SimpleMovingAverage for the given parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.STC(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new Schaff Trend Cycle indicator
            </summary>
            <param name="symbol">The symbol for the indicator to track</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="cyclePeriod">The signal period</param>
            <param name="movingAverageType">The type of moving average to use</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The SchaffTrendCycle indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.STD(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new StandardDeviation indicator. This will return the population standard deviation of samples over the specified period.
            </summary>
            <param name="symbol">The symbol whose STD we want</param>
            <param name="period">The period over which to compute the STD</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The StandardDeviation indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.STO(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Creates a new Stochastic indicator.
            </summary>
            <param name="symbol">The symbol whose stochastic we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="period">The period of the stochastic. Normally 14</param>
            <param name="kPeriod">The sum period of the stochastic. Normally 14</param>
            <param name="dPeriod">The sum period of the stochastic. Normally 3</param>
            <returns>Stochastic indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.STO(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Overload short hand to create a new Stochastic indicator; defaulting to the 3 period for dStoch
            </summary>
            <param name="symbol">The symbol whose stochastic we seek</param>
            <param name="resolution">The resolution.</param>
            <param name="period">The period of the stochastic. Normally 14</param>
            <returns>Stochastic indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SUM(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new Sum indicator.
            </summary>
            <param name="symbol">The symbol whose Sum we want</param>
            <param name="period">The period over which to compute the Sum</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Sum indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SWISS(QuantConnect.Symbol,System.Int32,System.Double,QuantConnect.Indicators.SwissArmyKnifeTool,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates Swiss Army Knife transformation for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol to use for calculations</param>
            <param name="period">The period of the calculation</param>
            <param name="delta">The delta scale of the BandStop or BandPass</param>
            <param name="tool">The tool os the Swiss Army Knife</param>
            <param name="resolution">The resolution</param>
            <param name="selector">elects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The calculation using the given tool</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.T3(QuantConnect.Symbol,System.Int32,System.Decimal,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new T3MovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose T3 we want</param>
            <param name="period">The period over which to compute the T3</param>
            <param name="volumeFactor">The volume factor to be used for the T3 (value must be in the [0,1] range, defaults to 0.7)</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The T3MovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.TEMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new TripleExponentialMovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose TEMA we want</param>
            <param name="period">The period over which to compute the TEMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The TripleExponentialMovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.TR(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new TrueRange indicator.
            </summary>
            <param name="symbol">The symbol whose TR we want</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The TrueRange indicator for the requested symbol.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.TRIMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new TriangularMovingAverage indicator.
            </summary>
            <param name="symbol">The symbol whose TRIMA we want</param>
            <param name="period">The period over which to compute the TRIMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The TriangularMovingAverage indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.TRIX(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new Trix indicator.
            </summary>
            <param name="symbol">The symbol whose TRIX we want</param>
            <param name="period">The period over which to compute the TRIX</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Trix indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ULTOSC(QuantConnect.Symbol,System.Int32,System.Int32,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new UltimateOscillator indicator.
            </summary>
            <param name="symbol">The symbol whose ULTOSC we want</param>
            <param name="period1">The first period over which to compute the ULTOSC</param>
            <param name="period2">The second period over which to compute the ULTOSC</param>
            <param name="period3">The third period over which to compute the ULTOSC</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The UltimateOscillator indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.VAR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a new Variance indicator. This will return the population variance of samples over the specified period.
            </summary>
            <param name="symbol">The symbol whose VAR we want</param>
            <param name="period">The period over which to compute the VAR</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Variance indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.VWAP(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.TradeBar})">
            <summary>
            Creates an VolumeWeightedAveragePrice (VWAP) indicator for the symbol. The indicator will be automatically
            updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose VWAP we want</param>
            <param name="period">The period of the VWAP</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The VolumeWeightedAveragePrice for the given parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.VWAP(QuantConnect.Symbol)">
            <summary>
            Creates the canonical VWAP indicator that resets each day. The indicator will be automatically
            updated on the security's configured resolution.
            </summary>
            <param name="symbol">The symbol whose VWAP we want</param>
            <returns>The IntradayVWAP for the specified symbol</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.WILR(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,QuantConnect.Data.Market.IBaseDataBar})">
            <summary>
            Creates a new Williams %R indicator. This will compute the percentage change of
            the current closing price in relation to the high and low of the past N periods.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose Williams %R we want</param>
            <param name="period">The period over which to compute the Williams %R</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The Williams %R indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.WWMA(QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates a WilderMovingAverage indicator for the symbol.
            The indicator will be automatically updated on the given resolution.
            </summary>
            <param name="symbol">The symbol whose WMA we want</param>
            <param name="period">The period of the WMA</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The WilderMovingAverage for the given parameters</returns>
            <remarks>WWMA for Welles Wilder Moving Average</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.TRIN(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.Nullable{QuantConnect.Resolution})">
            <summary>
            Creates a new Arms Index indicator
            </summary>
            <param name="symbols">The symbols whose Arms Index we want</param>
            <param name="resolution">The resolution</param>
            <returns>The Arms Index indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ADR(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.Nullable{QuantConnect.Resolution})">
            <summary>
            Creates a new Advance/Decline Ratio indicator
            </summary>
            <param name="symbols">The symbols whose A/D Ratio we want</param>
            <param name="resolution">The resolution</param>
            <returns>The Advance/Decline Ratio indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ADVR(System.Collections.Generic.IEnumerable{QuantConnect.Symbol},System.Nullable{QuantConnect.Resolution})">
            <summary>
            Creates a new Advance/Decline Volume Ratio indicator
            </summary>
            <param name="symbols">The symbol whose A/D Volume Rate we want</param>
            <param name="resolution">The resolution</param>
            <returns>The Advance/Decline Volume Ratio indicator for the requested symbol over the specified period</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CreateIndicatorName(QuantConnect.Symbol,System.FormattableString,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Creates a new name for an indicator created with the convenience functions (SMA, EMA, ect...)
            </summary>
            <param name="symbol">The symbol this indicator is registered to</param>
            <param name="type">The indicator type, for example, 'SMA(5)'</param>
            <param name="resolution">The resolution requested</param>
            <returns>A unique for the given parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetSubscription(QuantConnect.Symbol,System.Nullable{QuantConnect.TickType})">
            <summary>
            Gets the SubscriptionDataConfig for the specified symbol and tick type
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if no configuration is found for the requested symbol</exception>
            <param name="symbol">The symbol to retrieve configuration for</param>
            <param name="tickType">The tick type of the subscription to get. If null, will use the first ordered by TickType</param>
            <returns>The SubscriptionDataConfig for the specified symbol</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates and registers a new consolidator to receive automatic updates at the specified resolution as well as configures
            the indicator to receive updates from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.Nullable{System.TimeSpan},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Creates and registers a new consolidator to receive automatic updates at the specified resolution as well as configures
            the indicator to receive updates from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Data.Consolidators.IDataConsolidator,System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="consolidator">The consolidator to receive raw subscription data</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator``1(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{``0},System.Nullable{QuantConnect.Resolution})">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator``1(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{``0},System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,``0})">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to a cast (x => (T)x)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator``1(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{``0},System.Nullable{System.TimeSpan},System.Func{QuantConnect.Data.IBaseData,``0})">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to a cast (x => (T)x)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator``1(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{``0},QuantConnect.Data.Consolidators.IDataConsolidator,System.Func{QuantConnect.Data.IBaseData,``0})">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="consolidator">The consolidator to receive raw subscription data</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to a cast (x => (T)x)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.WarmUpIndicator(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Warms up a given indicator with historical data
            </summary>
            <param name="symbol">The symbol whose indicator we want</param>
            <param name="indicator">The indicator we want to warm up</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The given indicator</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.WarmUpIndicator(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.TimeSpan,System.Func{QuantConnect.Data.IBaseData,System.Decimal})">
            <summary>
            Warms up a given indicator with historical data
            </summary>
            <param name="symbol">The symbol whose indicator we want</param>
            <param name="indicator">The indicator we want to warm up</param>
            <param name="period">The necessary period to warm up the indicator</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The given indicator</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.WarmUpIndicator``1(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{``0},System.Nullable{QuantConnect.Resolution},System.Func{QuantConnect.Data.IBaseData,``0})">
            <summary>
            Warms up a given indicator with historical data
            </summary>
            <param name="symbol">The symbol whose indicator we want</param>
            <param name="indicator">The indicator we want to warm up</param>
            <param name="resolution">The resolution</param>
            <param name="selector">Selects a value from the BaseData to send into the indicator, if null defaults to the Value property of BaseData (x => x.Value)</param>
            <returns>The given indicator</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.WarmUpIndicator``1(QuantConnect.Symbol,QuantConnect.Indicators.IndicatorBase{``0},System.TimeSpan,System.Func{QuantConnect.Data.IBaseData,``0})">
            <summary>
            Warms up a given indicator with historical data
            </summary>
            <param name="symbol">The symbol whose indicator we want</param>
            <param name="indicator">The indicator we want to warm up</param>
            <param name="period">The necessary period to warm up the indicator</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to a cast (x => (T)x)</param>
            <returns>The given indicator</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ResolveConsolidator(QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},System.Type)">
            <summary>
            Gets the default consolidator for the specified symbol and resolution
            </summary>
            <param name="symbol">The symbol whose data is to be consolidated</param>
            <param name="resolution">The resolution for the consolidator, if null, uses the resolution from subscription</param>
            <param name="dataType">The data type for this consolidator, if null, uses TradeBar over QuoteBar if present</param>
            <returns>The new default consolidator</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ResolveConsolidator(QuantConnect.Symbol,System.Nullable{System.TimeSpan},System.Type)">
            <summary>
            Gets the default consolidator for the specified symbol and resolution
            </summary>
            <param name="symbol">The symbol whose data is to be consolidated</param>
            <param name="timeSpan">The requested time span for the consolidator, if null, uses the resolution from subscription</param>
            <param name="dataType">The data type for this consolidator, if null, uses TradeBar over QuoteBar if present</param>
            <returns>The new default consolidator</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CreateConsolidator(System.TimeSpan,System.Type,System.Nullable{QuantConnect.TickType})">
            <summary>
            Creates a new consolidator for the specified period, generating the requested output type.
            </summary>
            <param name="period">The consolidation period</param>
            <param name="consolidatorInputType">The desired input type of the consolidator, such as TradeBar or QuoteBar</param>
            <param name="tickType">Trade or Quote. Optional, defaults to trade</param>
            <returns>A new consolidator matching the requested parameters</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,QuantConnect.Resolution,System.Action{QuantConnect.Data.Market.TradeBar})">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="period">The consolidation period</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,System.TimeSpan,System.Action{QuantConnect.Data.Market.TradeBar})">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="period">The consolidation period</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,QuantConnect.Resolution,System.Action{QuantConnect.Data.Market.QuoteBar})">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="period">The consolidation period</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,System.TimeSpan,System.Action{QuantConnect.Data.Market.QuoteBar})">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="period">The consolidation period</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate``1(QuantConnect.Symbol,System.TimeSpan,System.Action{``0})">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol and tick type.
            The handler and tick type must match.
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="period">The consolidation period</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate``1(QuantConnect.Symbol,QuantConnect.Resolution,System.Nullable{QuantConnect.TickType},System.Action{``0})">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol and tick type.
            The handler and tick type must match.
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="period">The consolidation period</param>
            <param name="tickType">The tick type of subscription used as data source for consolidator. Specify null to use first subscription found.</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate``1(QuantConnect.Symbol,System.TimeSpan,System.Nullable{QuantConnect.TickType},System.Action{``0})">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol and tick type.
            The handler and tick type must match.
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="period">The consolidation period</param>
            <param name="tickType">The tick type of subscription used as data source for consolidator. Specify null to use first subscription found.</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,System.Func{System.DateTime,QuantConnect.Data.Consolidators.CalendarInfo},System.Action{QuantConnect.Data.Market.QuoteBar})">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="calendar">The consolidation calendar</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,System.Func{System.DateTime,QuantConnect.Data.Consolidators.CalendarInfo},System.Action{QuantConnect.Data.Market.TradeBar})">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="calendar">The consolidation calendar</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate``1(QuantConnect.Symbol,System.Func{System.DateTime,QuantConnect.Data.Consolidators.CalendarInfo},System.Action{``0})">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol and tick type.
            The handler and tick type must match.
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="calendar">The consolidation calendar</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate``1(QuantConnect.Symbol,System.Func{System.DateTime,QuantConnect.Data.Consolidators.CalendarInfo},System.Nullable{QuantConnect.TickType},System.Action{``0})">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol and tick type.
            The handler and tick type must match.
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="calendar">The consolidation calendar</param>
            <param name="tickType">The tick type of subscription used as data source for consolidator. Specify null to use first subscription found.</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddConsolidator``1(QuantConnect.Symbol,QuantConnect.Data.Consolidators.IDataConsolidator,System.Action{``0})">
            <summary>
            Adds the provided consolidator and asserts the handler T type is assignable from the consolidator output,
            if not will throw <see cref="T:System.ArgumentException"/>
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.RuntimeStatistics">
            <summary>
            Access to the runtime statistics property. User provided statistics.
            </summary>
            <remarks> RuntimeStatistics are displayed in the head banner in live trading</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddChart(QuantConnect.Chart)">
            <summary>
            Add a Chart object to algorithm collection
            </summary>
            <param name="chart">Chart object to add to collection.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.Decimal)">
            <summary>
            Plot a chart using string series name, with value.
            </summary>
            <param name="series">Name of the plot series</param>
            <param name="value">Value to plot</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Record(System.String,System.Int32)">
            <summary>
            Plot a chart using string series name, with int value. Alias of Plot();
            </summary>
            <remarks> Record(string series, int value)</remarks>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Record(System.String,System.Double)">
            <summary>
            Plot a chart using string series name, with double value. Alias of Plot();
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Record(System.String,System.Decimal)">
            <summary>
            Plot a chart using string series name, with decimal value. Alias of Plot();
            </summary>
            <param name="series"></param>
            <param name="value"></param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.Double)">
            <summary>
            Plot a chart using string series name, with double value.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.Int32)">
            <summary>
            Plot a chart using string series name, with int value.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.Single)">
             <summary>
            Plot a chart using string series name, with float value.
             </summary>
             <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Double)">
            <summary>
            Plot a chart to string chart name, using string series name, with double value.
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Int32)">
            <summary>
            Plot a chart to string chart name, using string series name, with int value
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Single)">
            <summary>
            Plot a chart to string chart name, using string series name, with float value
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)">
            <summary>
            Plot a value to a chart of string-chart name, with string series name, and decimal value. If chart does not exist, create it.
            </summary>
            <param name="chart">Chart name</param>
            <param name="series">Series name</param>
            <param name="value">Value of the point</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddSeries(System.String,System.String,QuantConnect.SeriesType,System.String)">
            <summary>
            Add a series object for charting. This is useful when initializing charts with
            series other than type = line. If a series exists in the chart with the same name,
            then it is replaced.
            </summary>
            <param name="chart">The chart name</param>
            <param name="series">The series name</param>
            <param name="seriesType">The type of series, i.e, Scatter</param>
            <param name="unit">The unit of the y axis, usually $</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot``1(System.String,QuantConnect.Indicators.IndicatorBase{``0}[])">
            <summary>
            Plots the value of each indicator on the chart
            </summary>
            <param name="chart">The chart's name</param>
            <param name="indicators">The indicatorsto plot</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PlotIndicator``1(System.String,QuantConnect.Indicators.IndicatorBase{``0}[])">
            <summary>
            Automatically plots each indicator when a new value is available
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PlotIndicator``1(System.String,System.Boolean,QuantConnect.Indicators.IndicatorBase{``0}[])">
            <summary>
            Automatically plots each indicator when a new value is available, optionally waiting for indicator.IsReady to return true
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRuntimeStatistic(System.String,System.String)">
            <summary>
            Set a runtime statistic for the algorithm. Runtime statistics are shown in the top banner of a live algorithm GUI.
            </summary>
            <param name="name">Name of your runtime statistic</param>
            <param name="value">String value of your runtime statistic</param>
            <seealso cref="P:QuantConnect.Algorithm.QCAlgorithm.LiveMode"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRuntimeStatistic(System.String,System.Decimal)">
            <summary>
            Set a runtime statistic for the algorithm. Runtime statistics are shown in the top banner of a live algorithm GUI.
            </summary>
            <param name="name">Name of your runtime statistic</param>
            <param name="value">Decimal value of your runtime statistic</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRuntimeStatistic(System.String,System.Int32)">
            <summary>
            Set a runtime statistic for the algorithm. Runtime statistics are shown in the top banner of a live algorithm GUI.
            </summary>
            <param name="name">Name of your runtime statistic</param>
            <param name="value">Int value of your runtime statistic</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetRuntimeStatistic(System.String,System.Double)">
            <summary>
            Set a runtime statistic for the algorithm. Runtime statistics are shown in the top banner of a live algorithm GUI.
            </summary>
            <param name="name">Name of your runtime statistic</param>
            <param name="value">Double value of your runtime statistic</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetChartUpdates(System.Boolean)">
            <summary>
            Get the chart updates by fetch the recent points added and return for dynamic plotting.
            </summary>
            <param name="clearChartData"></param>
            <returns>List of chart updates since the last request</returns>
            <remarks>GetChartUpdates returns the latest updates since previous request.</remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetPandasConverter">
            <summary>
            Sets pandas converter
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData(Python.Runtime.PyObject,System.String,System.Nullable{QuantConnect.Resolution})">
            <summary>
            AddData a new user defined data source, requiring only the minimum config options.
            The data is added with a default time zone of NewYork (Eastern Daylight Savings Time).
            This method is meant for custom data types that require a ticker, but have no underlying Symbol.
            Examples of data sources that meet this criteria are U.S. Treasury Yield Curve Rates and Trading Economics data
            </summary>
            <param name="type">Data source type</param>
            <param name="ticker">Key/Ticker for data</param>
            <param name="resolution">Resolution of the data</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData(Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution})">
            <summary>
            AddData a new user defined data source, requiring only the minimum config options.
            The data is added with a default time zone of NewYork (Eastern Daylight Savings Time).
            This adds a Symbol to the `Underlying` property in the custom data Symbol object.
            Use this method when adding custom data with a ticker from the past, such as "AOL"
            before it became "TWX", or if you need to filter using custom data and place trades on the
            Symbol associated with the custom data.
            </summary>
            <param name="type">Data source type</param>
            <param name="underlying">The underlying symbol for the custom data</param>
            <param name="resolution">Resolution of the data</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
            <remarks>
            We include three optional unused object parameters so that pythonnet chooses the intended method
            correctly. Previously, calling the overloaded method that accepts a string would instead call this method.
            Adding the three unused parameters makes it choose the correct method when using a string or Symbol. This is
            due to pythonnet's method precedence, as viewable here: https://github.com/QuantConnect/pythonnet/blob/9e29755c54e6008cb016e3dd9d75fbd8cd19fcf7/src/runtime/methodbinder.cs#L215
            </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData(Python.Runtime.PyObject,System.String,System.Nullable{QuantConnect.Resolution},NodaTime.DateTimeZone,System.Boolean,System.Decimal)">
            <summary>
            AddData a new user defined data source, requiring only the minimum config options.
            This method is meant for custom data types that require a ticker, but have no underlying Symbol.
            Examples of data sources that meet this criteria are U.S. Treasury Yield Curve Rates and Trading Economics data
            </summary>
            <param name="type">Data source type</param>
            <param name="ticker">Key/Ticker for data</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="timeZone">Specifies the time zone of the raw data</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData(Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},NodaTime.DateTimeZone,System.Boolean,System.Decimal)">
            <summary>
            AddData a new user defined data source, requiring only the minimum config options.
            This adds a Symbol to the `Underlying` property in the custom data Symbol object.
            Use this method when adding custom data with a ticker from the past, such as "AOL"
            before it became "TWX", or if you need to filter using custom data and place trades on the
            Symbol associated with the custom data.
            </summary>
            <param name="type">Data source type</param>
            <param name="underlying">The underlying symbol for the custom data</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="timeZone">Specifies the time zone of the raw data</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
            <remarks>
            We include three optional unused object parameters so that pythonnet chooses the intended method
            correctly. Previously, calling the overloaded method that accepts a string would instead call this method.
            Adding the three unused parameters makes it choose the correct method when using a string or Symbol. This is
            due to pythonnet's method precedence, as viewable here: https://github.com/QuantConnect/pythonnet/blob/9e29755c54e6008cb016e3dd9d75fbd8cd19fcf7/src/runtime/methodbinder.cs#L215
            </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData(System.Type,System.String,System.Nullable{QuantConnect.Resolution},NodaTime.DateTimeZone,System.Boolean,System.Decimal)">
            <summary>
            AddData a new user defined data source, requiring only the minimum config options.
            This method is meant for custom data types that require a ticker, but have no underlying Symbol.
            Examples of data sources that meet this criteria are U.S. Treasury Yield Curve Rates and Trading Economics data
            </summary>
            <param name="dataType">Data source type</param>
            <param name="ticker">Key/Ticker for data</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="timeZone">Specifies the time zone of the raw data</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData(System.Type,QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},NodaTime.DateTimeZone,System.Boolean,System.Decimal)">
            <summary>
            AddData a new user defined data source, requiring only the minimum config options.
            This adds a Symbol to the `Underlying` property in the custom data Symbol object.
            Use this method when adding custom data with a ticker from the past, such as "AOL"
            before it became "TWX", or if you need to filter using custom data and place trades on the
            Symbol associated with the custom data.
            </summary>
            <param name="dataType">Data source type</param>
            <param name="underlying"></param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="timeZone">Specifies the time zone of the raw data</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
            <remarks>
            We include three optional unused object parameters so that pythonnet chooses the intended method
            correctly. Previously, calling the overloaded method that accepts a string would instead call this method.
            Adding the three unused parameters makes it choose the correct method when using a string or Symbol. This is
            due to pythonnet's method precedence, as viewable here: https://github.com/QuantConnect/pythonnet/blob/9e29755c54e6008cb016e3dd9d75fbd8cd19fcf7/src/runtime/methodbinder.cs#L215
            </remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddData(Python.Runtime.PyObject,System.String,QuantConnect.Securities.SymbolProperties,QuantConnect.Securities.SecurityExchangeHours,System.Nullable{QuantConnect.Resolution},System.Boolean,System.Decimal)">
            <summary>
            AddData a new user defined data source including symbol properties and exchange hours,
            all other vars are not required and will use defaults.
            This overload reflects the C# equivalent for custom properties and market hours
            </summary>
            <param name="type">Data source type</param>
            <param name="ticker">Key/Ticker for data</param>
            <param name="properties">The properties of this new custom data</param>
            <param name="exchangeHours">The Exchange hours of this symbol</param>
            <param name="resolution">Resolution of the Data Required</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddFutureOption(QuantConnect.Symbol,Python.Runtime.PyObject)">
            <summary>
            Creates and adds a new Future Option contract to the algorithm.
            </summary>
            <param name="symbol">The <see cref="!:Future"/> canonical symbol (i.e. Symbol returned from <see cref="M:QuantConnect.Algorithm.QCAlgorithm.AddFuture(System.String,System.Nullable{QuantConnect.Resolution},System.String,System.Boolean,System.Decimal)"/>)</param>
            <param name="optionFilter">Filter to apply to option contracts loaded as part of the universe</param>
            <returns>The new <see cref="!:Option"/> security, containing a <see cref="!:Future"/> as its underlying.</returns>
            <exception cref="T:System.ArgumentException">The symbol provided is not canonical.</exception>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddDataImpl(System.Type,QuantConnect.Symbol,System.Nullable{QuantConnect.Resolution},NodaTime.DateTimeZone,System.Boolean,System.Decimal)">
            <summary>
            Adds the provided final Symbol with/without underlying set to the algorithm.
            This method is meant for custom data types that require a ticker, but have no underlying Symbol.
            Examples of data sources that meet this criteria are U.S. Treasury Yield Curve Rates and Trading Economics data
            </summary>
            <param name="dataType">Data source type</param>
            <param name="symbol">Final symbol that includes underlying (if any)</param>
            <param name="resolution">Resolution of the Data required</param>
            <param name="timeZone">Specifies the time zone of the raw data</param>
            <param name="fillDataForward">When no data available on a tradebar, return the last data that was generated</param>
            <param name="leverage">Custom leverage per security</param>
            <returns>The new <see cref="T:QuantConnect.Securities.Security"/></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(Python.Runtime.PyObject)">
            <summary>
            Creates a new universe and adds it to the algorithm. This is for coarse fundamental US Equity data and
            will be executed on day changes in the NewYork time zone (<see cref="F:QuantConnect.TimeZones.NewYork"/>
            </summary>
            <param name="pyObject">Defines an initial coarse selection</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(Python.Runtime.PyObject,Python.Runtime.PyObject)">
            <summary>
            Creates a new universe and adds it to the algorithm. This is for coarse and fine fundamental US Equity data and
            will be executed on day changes in the NewYork time zone (<see cref="F:QuantConnect.TimeZones.NewYork"/>
            </summary>
            <param name="pyObject">Defines an initial coarse selection or a universe</param>
            <param name="pyfine">Defines a more detailed selection with access to more data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(System.String,QuantConnect.Resolution,Python.Runtime.PyObject)">
            <summary>
            Creates a new universe and adds it to the algorithm. This can be used to return a list of string
            symbols retrieved from anywhere and will loads those symbols under the US Equity market.
            </summary>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The resolution this universe should be triggered on</param>
            <param name="pySelector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(System.String,Python.Runtime.PyObject)">
            <summary>
            Creates a new universe and adds it to the algorithm. This can be used to return a list of string
            symbols retrieved from anywhere and will loads those symbols under the US Equity market.
            </summary>
            <param name="name">A unique name for this universe</param>
            <param name="pySelector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,Python.Runtime.PyObject)">
            <summary>
            Creates a new user defined universe that will fire on the requested resolution during market hours.
            </summary>
            <param name="securityType">The security type of the universe</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The resolution this universe should be triggered on</param>
            <param name="market">The market of the universe</param>
            <param name="universeSettings">The subscription settings used for securities added from this universe</param>
            <param name="pySelector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(Python.Runtime.PyObject,System.String,Python.Runtime.PyObject)">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Resolution.Daily, Market.USA, and UniverseSettings
            </summary>
            <param name="T">The data type</param>
            <param name="name">A unique name for this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(Python.Runtime.PyObject,System.String,QuantConnect.Resolution,Python.Runtime.PyObject)">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Market.USA and UniverseSettings
            </summary>
            <param name="T">The data type</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(Python.Runtime.PyObject,System.String,QuantConnect.Resolution,QuantConnect.Data.UniverseSelection.UniverseSettings,Python.Runtime.PyObject)">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, and Market.USA
            </summary>
            <param name="T">The data type</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="universeSettings">The settings used for securities added by this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(Python.Runtime.PyObject,System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,Python.Runtime.PyObject)">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Resolution.Daily, and Market.USA
            </summary>
            <param name="T">The data type</param>
            <param name="name">A unique name for this universe</param>
            <param name="universeSettings">The settings used for securities added by this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(Python.Runtime.PyObject,QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,Python.Runtime.PyObject)">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property.
            </summary>
            <param name="T">The data type</param>
            <param name="securityType">The security type the universe produces</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="market">The market for selected symbols</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(Python.Runtime.PyObject,QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,Python.Runtime.PyObject)">
            <summary>
            Creates a new universe and adds it to the algorithm
            </summary>
            <param name="T">The data type</param>
            <param name="securityType">The security type the universe produces</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="market">The market for selected symbols</param>
            <param name="universeSettings">The subscription settings to use for newly created subscriptions</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(System.Type,QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,Python.Runtime.PyObject)">
            <summary>
            Creates a new universe and adds it to the algorithm
            </summary>
            <param name="dataType">The data type</param>
            <param name="securityType">The security type the universe produces</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="market">The market for selected symbols</param>
            <param name="universeSettings">The subscription settings to use for newly created subscriptions</param>
            <param name="pySelector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverseOptions(Python.Runtime.PyObject,Python.Runtime.PyObject)">
            <summary>
            Creates a new universe selection model and adds it to the algorithm. This universe selection model will chain to the security
            changes of a given <see cref="P:QuantConnect.Algorithm.QCAlgorithm.Universe"/> selection output and create a new <see cref="T:QuantConnect.Data.UniverseSelection.OptionChainUniverse"/> for each of them
            </summary>
            <param name="universe">The universe we want to chain an option universe selection model too</param>
            <param name="optionFilter">The option filter universe to use</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator(QuantConnect.Symbol,Python.Runtime.PyObject,System.Nullable{QuantConnect.Resolution},Python.Runtime.PyObject)">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to a cast (x => (T)x)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator(QuantConnect.Symbol,Python.Runtime.PyObject,System.Nullable{System.TimeSpan},Python.Runtime.PyObject)">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="resolution">The resolution at which to send data to the indicator, null to use the same resolution as the subscription</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to a cast (x => (T)x)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator(QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,Python.Runtime.PyObject)">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="pyObject">The python object that it is trying to register with, could be consolidator or a timespan</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to a cast (x => (T)x)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.RegisterIndicator(QuantConnect.Symbol,Python.Runtime.PyObject,QuantConnect.Data.Consolidators.IDataConsolidator,Python.Runtime.PyObject)">
            <summary>
            Registers the consolidator to receive automatic updates as well as configures the indicator to receive updates
            from the consolidator.
            </summary>
            <param name="symbol">The symbol to register against</param>
            <param name="indicator">The indicator to receive data from the consolidator</param>
            <param name="consolidator">The consolidator to receive raw subscription data</param>
            <param name="selector">Selects a value from the BaseData send into the indicator, if null defaults to a cast (x => (T)x)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,Python.Runtime.PyObject)">
            <summary>
            Plot a chart using string series name, with value.
            </summary>
            <param name="series">Name of the plot series</param>
            <param name="pyObject">PyObject with the value to plot</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,QuantConnect.Indicators.Indicator,QuantConnect.Indicators.Indicator,QuantConnect.Indicators.Indicator,QuantConnect.Indicators.Indicator)">
            <summary>
            Plots the value of each indicator on the chart
            </summary>
            <param name="chart">The chart's name</param>
            <param name="first">The first indicator to plot</param>
            <param name="second">The second indicator to plot</param>
            <param name="third">The third indicator to plot</param>
            <param name="fourth">The fourth indicator to plot</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,QuantConnect.Indicators.BarIndicator,QuantConnect.Indicators.BarIndicator,QuantConnect.Indicators.BarIndicator,QuantConnect.Indicators.BarIndicator)">
            <summary>
            Plots the value of each indicator on the chart
            </summary>
            <param name="chart">The chart's name</param>
            <param name="first">The first indicator to plot</param>
            <param name="second">The second indicator to plot</param>
            <param name="third">The third indicator to plot</param>
            <param name="fourth">The fourth indicator to plot</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,QuantConnect.Indicators.TradeBarIndicator,QuantConnect.Indicators.TradeBarIndicator,QuantConnect.Indicators.TradeBarIndicator,QuantConnect.Indicators.TradeBarIndicator)">
            <summary>
            Plots the value of each indicator on the chart
            </summary>
            <param name="chart">The chart's name</param>
            <param name="first">The first indicator to plot</param>
            <param name="second">The second indicator to plot</param>
            <param name="third">The third indicator to plot</param>
            <param name="fourth">The fourth indicator to plot</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Plot(System.String,System.String,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PlotIndicator(System.String,Python.Runtime.PyObject,Python.Runtime.PyObject,Python.Runtime.PyObject,Python.Runtime.PyObject)">
            <summary>
            Automatically plots each indicator when a new value is available
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PlotIndicator(System.String,System.Boolean,Python.Runtime.PyObject,Python.Runtime.PyObject,Python.Runtime.PyObject,Python.Runtime.PyObject)">
            <summary>
            Automatically plots each indicator when a new value is available
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.FilteredIdentity(QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,System.String)">
            <summary>
            Creates a new FilteredIdentity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="filter">Filters the IBaseData send into the indicator, if null defaults to true (x => true) which means no filter</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new FilteredIdentity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.FilteredIdentity(QuantConnect.Symbol,QuantConnect.Resolution,Python.Runtime.PyObject,Python.Runtime.PyObject,System.String)">
            <summary>
            Creates a new FilteredIdentity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="resolution">The desired resolution of the data</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="filter">Filters the IBaseData send into the indicator, if null defaults to true (x => true) which means no filter</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new FilteredIdentity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.FilteredIdentity(QuantConnect.Symbol,System.TimeSpan,Python.Runtime.PyObject,Python.Runtime.PyObject,System.String)">
            <summary>
            Creates a new FilteredIdentity indicator for the symbol The indicator will be automatically
            updated on the symbol's subscription resolution
            </summary>
            <param name="symbol">The symbol whose values we want as an indicator</param>
            <param name="resolution">The desired resolution of the data</param>
            <param name="selector">Selects a value from the BaseData, if null defaults to the .Value property (x => x.Value)</param>
            <param name="filter">Filters the IBaseData send into the indicator, if null defaults to true (x => true) which means no filter</param>
            <param name="fieldName">The name of the field being selected</param>
            <returns>A new FilteredIdentity indicator for the specified symbol and selector</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(Python.Runtime.PyObject,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol. The exact number of bars will be returned.
            The symbol must exist in the Securities collection.
            </summary>
            <param name="tickers">The symbols to retrieve historical data for</param>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>A python dictionary with pandas DataFrame containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(Python.Runtime.PyObject,System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols over the requested span.
            The symbols must exist in the Securities collection.
            </summary>
            <param name="tickers">The symbols to retrieve historical data for</param>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>A python dictionary with pandas DataFrame containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(Python.Runtime.PyObject,System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbol between the specified dates. The symbol must exist in the Securities collection.
            </summary>
            <param name="tickers">The symbols to retrieve historical data for</param>
            <param name="start">The start time in the algorithm's time zone</param>
            <param name="end">The end time in the algorithm's time zone</param>
            <param name="resolution">The resolution to request</param>
            <returns>A python dictionary with pandas DataFrame containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(Python.Runtime.PyObject,Python.Runtime.PyObject,System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols between the specified dates. The symbols must exist in the Securities collection.
            </summary>
            <param name="type">The data type of the symbols</param>
            <param name="tickers">The symbols to retrieve historical data for</param>
            <param name="start">The start time in the algorithm's time zone</param>
            <param name="end">The end time in the algorithm's time zone</param>
            <param name="resolution">The resolution to request</param>
            <returns>pandas.DataFrame containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(Python.Runtime.PyObject,Python.Runtime.PyObject,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols. The exact number of bars will be returned for
            each symbol. This may result in some data start earlier/later than others due to when various
            exchanges are open. The symbols must exist in the Securities collection.
            </summary>
            <param name="type">The data type of the symbols</param>
            <param name="tickers">The symbols to retrieve historical data for</param>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>pandas.DataFrame containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(Python.Runtime.PyObject,Python.Runtime.PyObject,System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols over the requested span.
            The symbols must exist in the Securities collection.
            </summary>
            <param name="type">The data type of the symbols</param>
            <param name="tickers">The symbols to retrieve historical data for</param>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>pandas.DataFrame containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(Python.Runtime.PyObject,QuantConnect.Symbol,System.DateTime,System.DateTime,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols between the specified dates. The symbols must exist in the Securities collection.
            </summary>
            <param name="type">The data type of the symbols</param>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="start">The start time in the algorithm's time zone</param>
            <param name="end">The end time in the algorithm's time zone</param>
            <param name="resolution">The resolution to request</param>
            <returns>pandas.DataFrame containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(Python.Runtime.PyObject,QuantConnect.Symbol,System.Int32,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols. The exact number of bars will be returned for
            each symbol. This may result in some data start earlier/later than others due to when various
            exchanges are open. The symbols must exist in the Securities collection.
            </summary>
            <param name="type">The data type of the symbols</param>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="periods">The number of bars to request</param>
            <param name="resolution">The resolution to request</param>
            <returns>pandas.DataFrame containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.History(Python.Runtime.PyObject,QuantConnect.Symbol,System.TimeSpan,System.Nullable{QuantConnect.Resolution})">
            <summary>
            Gets the historical data for the specified symbols over the requested span.
            The symbols must exist in the Securities collection.
            </summary>
            <param name="type">The data type of the symbols</param>
            <param name="symbol">The symbol to retrieve historical data for</param>
            <param name="span">The span over which to retrieve recent historical data</param>
            <param name="resolution">The resolution to request</param>
            <returns>pandas.DataFrame containing the requested historical data</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBenchmark(Python.Runtime.PyObject)">
            <summary>
            Sets the specified function as the benchmark, this function provides the value of
            the benchmark at each date/time requested
            </summary>
            <param name="benchmark">The benchmark producing function</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetBrokerageModel(Python.Runtime.PyObject)">
            <summary>
            Sets the brokerage to emulate in backtesting or paper trading.
            This can be used to set a custom brokerage model.
            </summary>
            <param name="model">The brokerage model to use</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetSecurityInitializer(Python.Runtime.PyObject)">
            <summary>
            Sets the security initializer function, used to initialize/configure securities after creation
            </summary>
            <param name="securityInitializer">The security initializer function or class</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Download(System.String,Python.Runtime.PyObject)">
            <summary>
            Downloads the requested resource as a <see cref="T:System.String"/>.
            The resource to download is specified as a <see cref="T:System.String"/> containing the URI.
            </summary>
            <param name="address">A string containing the URI to download</param>
            <param name="headers">Defines header values to add to the request</param>
            <returns>The requested resource as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Download(System.String,Python.Runtime.PyObject,System.String,System.String)">
            <summary>
            Downloads the requested resource as a <see cref="T:System.String"/>.
            The resource to download is specified as a <see cref="T:System.String"/> containing the URI.
            </summary>
            <param name="address">A string containing the URI to download</param>
            <param name="headers">Defines header values to add to the request</param>
            <param name="userName">The user name associated with the credentials</param>
            <param name="password">The password for the user name associated with the credentials</param>
            <returns>The requested resource as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Debug(Python.Runtime.PyObject)">
            <summary>
            Send a debug message to the web console:
            </summary>
            <param name="message">Message to send to debug console</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(Python.Runtime.PyObject)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(Python.Runtime.PyObject)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Error(Python.Runtime.PyObject)">
            <summary>
            Send a string error message to the Console.
            </summary>
            <param name="message">Message to display in errors grid</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(Python.Runtime.PyObject)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Log(Python.Runtime.PyObject)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Log(Python.Runtime.PyObject)">
            <summary>
            Added another method for logging if user guessed.
            </summary>
            <param name="message">String message to log.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Debug(Python.Runtime.PyObject)"/>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Error(Python.Runtime.PyObject)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Quit(Python.Runtime.PyObject)">
            <summary>
            Terminate the algorithm after processing the current event handler.
            </summary>
            <param name="message">Exit message to display on quitting</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,QuantConnect.Resolution,Python.Runtime.PyObject)">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="period">The consolidation period</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,QuantConnect.Resolution,System.Nullable{QuantConnect.TickType},Python.Runtime.PyObject)">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="period">The consolidation period</param>
            <param name="tickType">The tick type of subscription used as data source for consolidator. Specify null to use first subscription found.</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,System.TimeSpan,Python.Runtime.PyObject)">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="period">The consolidation period</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,System.TimeSpan,System.Nullable{QuantConnect.TickType},Python.Runtime.PyObject)">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="period">The consolidation period</param>
            <param name="tickType">The tick type of subscription used as data source for consolidator. Specify null to use first subscription found.</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,System.Func{System.DateTime,QuantConnect.Data.Consolidators.CalendarInfo},Python.Runtime.PyObject)">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="calendar">The consolidation calendar</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Train(Python.Runtime.PyObject)">
            <summary>
            Schedules the provided training code to execute immediately
            </summary>
            <param name="trainingCode">The training code to be invoked</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Train(QuantConnect.Scheduling.IDateRule,QuantConnect.Scheduling.ITimeRule,Python.Runtime.PyObject)">
            <summary>
            Schedules the training code to run using the specified date and time rules
            </summary>
            <param name="dateRule">Specifies what dates the event should run</param>
            <param name="timeRule">Specifies the times on those dates the event should run</param>
            <param name="trainingCode">The training code to be invoked</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Consolidate(QuantConnect.Symbol,System.Func{System.DateTime,QuantConnect.Data.Consolidators.CalendarInfo},System.Nullable{QuantConnect.TickType},Python.Runtime.PyObject)">
            <summary>
            Registers the <paramref name="handler"/> to receive consolidated data for the specified symbol
            </summary>
            <param name="symbol">The symbol who's data is to be consolidated</param>
            <param name="calendar">The consolidation calendar</param>
            <param name="tickType">The tick type of subscription used as data source for consolidator. Specify null to use first subscription found.</param>
            <param name="handler">Data handler receives new consolidated data when generated</param>
            <returns>A new consolidator matching the requested parameters with the handler already registered</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetIndicatorBaseType(System.Type)">
            <summary>
            Gets indicator base type
            </summary>
            <param name="type">Indicator type</param>
            <returns>Indicator base type</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.GetIndicatorArray(Python.Runtime.PyObject,Python.Runtime.PyObject,Python.Runtime.PyObject,Python.Runtime.PyObject)">
            <summary>
            Converts the sequence of PyObject objects into an array of dynamic objects that represent indicators of the same type
            </summary>
            <returns>Array of dynamic objects with indicator</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.WrapPythonIndicator(Python.Runtime.PyObject)">
            <summary>
            Wraps a custom python indicator and save its reference to _pythonIndicators dictionary
            </summary>
            <param name="pyObject">The python implementation of <see cref="T:QuantConnect.Indicators.IndicatorBase`1"/></param>
            <returns><see cref="T:QuantConnect.Indicators.PythonIndicator"/> that wraps the python implementation</returns>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Transactions">
            <summary>
            Transaction Manager - Process transaction fills and order management.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Int32)">
            <summary>
            Buy Stock (Alias of Order)
            </summary>
            <param name="symbol">string Symbol of the asset to trade</param>
            <param name="quantity">int Quantity of the asset to trade</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Double)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Double)">
            <summary>
            Buy Stock (Alias of Order)
            </summary>
            <param name="symbol">string Symbol of the asset to trade</param>
            <param name="quantity">double Quantity of the asset to trade</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Decimal)">
            <summary>
            Buy Stock (Alias of Order)
            </summary>
            <param name="symbol">string Symbol of the asset to trade</param>
            <param name="quantity">decimal Quantity of the asset to trade</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Int32)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Single)">
            <summary>
            Buy Stock (Alias of Order)
            </summary>
            <param name="symbol">string Symbol of the asset to trade</param>
            <param name="quantity">float Quantity of the asset to trade</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Symbol,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol,System.Int32)">
            <summary>
            Sell stock (alias of Order)
            </summary>
            <param name="symbol">string Symbol of the asset to trade</param>
            <param name="quantity">int Quantity of the asset to trade</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol,System.Double)">
            <summary>
            Sell stock (alias of Order)
            </summary>
            <param name="symbol">String symbol to sell</param>
            <param name="quantity">Quantity to order</param>
            <returns>int Order Id.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol,System.Single)">
            <summary>
            Sell stock (alias of Order)
            </summary>
            <param name="symbol">String symbol</param>
            <param name="quantity">Quantity to sell</param>
            <returns>int order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Symbol,System.Decimal)">
            <summary>
            Sell stock (alias of Order)
            </summary>
            <param name="symbol">String symbol to sell</param>
            <param name="quantity">Quantity to sell</param>
            <returns>Int Order Id.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Double)">
            <summary>
            Issue an order/trade for asset: Alias wrapper for Order(string, int);
            </summary>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Decimal)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Int32)">
            <summary>
            Issue an order/trade for asset
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Decimal)">
            <summary>
            Issue an order/trade for asset
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)">
            <summary>
            Wrapper for market order method: submit a new order for quantity of symbol using type order.
            </summary>
            <param name="symbol">Symbol of the MarketType Required.</param>
            <param name="quantity">Number of shares to request.</param>
            <param name="asynchronous">Send the order asynchronously (false). Otherwise we'll block until it fills</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)">
            <summary>
            Market order implementation: Send a market order and wait for it to be filled.
            </summary>
            <param name="symbol">Symbol of the MarketType Required.</param>
            <param name="quantity">Number of shares to request.</param>
            <param name="asynchronous">Send the order asynchronously (false). Otherwise we'll block until it fills</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>int Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Double,System.Boolean,System.String)">
            <summary>
            Market order implementation: Send a market order and wait for it to be filled.
            </summary>
            <param name="symbol">Symbol of the MarketType Required.</param>
            <param name="quantity">Number of shares to request.</param>
            <param name="asynchronous">Send the order asynchronously (false). Otherwise we'll block until it fills</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>int Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)">
            <summary>
            Market order implementation: Send a market order and wait for it to be filled.
            </summary>
            <param name="symbol">Symbol of the MarketType Required.</param>
            <param name="quantity">Number of shares to request.</param>
            <param name="asynchronous">Send the order asynchronously (false). Otherwise we'll block until it fills</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>int Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol,System.Double,System.String)">
            <summary>
            Market on open order implementation: Send a market order when the exchange opens
            </summary>
            <param name="symbol">The symbol to be ordered</param>
            <param name="quantity">The number of shares to required</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>The order ID</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol,System.Int32,System.String)">
            <summary>
            Market on open order implementation: Send a market order when the exchange opens
            </summary>
            <param name="symbol">The symbol to be ordered</param>
            <param name="quantity">The number of shares to required</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>The order ID</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOnOpenOrder(QuantConnect.Symbol,System.Decimal,System.String)">
            <summary>
            Market on open order implementation: Send a market order when the exchange opens
            </summary>
            <param name="symbol">The symbol to be ordered</param>
            <param name="quantity">The number of shares to required</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>The order ID</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol,System.Int32,System.String)">
            <summary>
            Market on close order implementation: Send a market order when the exchange closes
            </summary>
            <param name="symbol">The symbol to be ordered</param>
            <param name="quantity">The number of shares to required</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>The order ID</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol,System.Double,System.String)">
            <summary>
            Market on close order implementation: Send a market order when the exchange closes
            </summary>
            <param name="symbol">The symbol to be ordered</param>
            <param name="quantity">The number of shares to required</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>The order ID</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.MarketOnCloseOrder(QuantConnect.Symbol,System.Decimal,System.String)">
            <summary>
            Market on close order implementation: Send a market order when the exchange closes
            </summary>
            <param name="symbol">The symbol to be ordered</param>
            <param name="quantity">The number of shares to required</param>
            <param name="tag">Place a custom order property or tag (e.g. indicator data).</param>
            <returns>The order ID</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol,System.Int32,System.Decimal,System.String)">
            <summary>
            Send a limit order to the transaction handler:
            </summary>
            <param name="symbol">String symbol for the asset</param>
            <param name="quantity">Quantity of shares for limit order</param>
            <param name="limitPrice">Limit price to fill this order</param>
            <param name="tag">String tag for the order (optional)</param>
            <returns>Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol,System.Double,System.Decimal,System.String)">
            <summary>
            Send a limit order to the transaction handler:
            </summary>
            <param name="symbol">String symbol for the asset</param>
            <param name="quantity">Quantity of shares for limit order</param>
            <param name="limitPrice">Limit price to fill this order</param>
            <param name="tag">String tag for the order (optional)</param>
            <returns>Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.LimitOrder(QuantConnect.Symbol,System.Decimal,System.Decimal,System.String)">
            <summary>
            Send a limit order to the transaction handler:
            </summary>
            <param name="symbol">String symbol for the asset</param>
            <param name="quantity">Quantity of shares for limit order</param>
            <param name="limitPrice">Limit price to fill this order</param>
            <param name="tag">String tag for the order (optional)</param>
            <returns>Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol,System.Int32,System.Decimal,System.String)">
            <summary>
            Create a stop market order and return the newly created order id; or negative if the order is invalid
            </summary>
            <param name="symbol">String symbol for the asset we're trading</param>
            <param name="quantity">Quantity to be traded</param>
            <param name="stopPrice">Price to fill the stop order</param>
            <param name="tag">Optional string data tag for the order</param>
            <returns>Int orderId for the new order.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol,System.Double,System.Decimal,System.String)">
            <summary>
            Create a stop market order and return the newly created order id; or negative if the order is invalid
            </summary>
            <param name="symbol">String symbol for the asset we're trading</param>
            <param name="quantity">Quantity to be traded</param>
            <param name="stopPrice">Price to fill the stop order</param>
            <param name="tag">Optional string data tag for the order</param>
            <returns>Int orderId for the new order.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.StopMarketOrder(QuantConnect.Symbol,System.Decimal,System.Decimal,System.String)">
            <summary>
            Create a stop market order and return the newly created order id; or negative if the order is invalid
            </summary>
            <param name="symbol">String symbol for the asset we're trading</param>
            <param name="quantity">Quantity to be traded</param>
            <param name="stopPrice">Price to fill the stop order</param>
            <param name="tag">Optional string data tag for the order</param>
            <returns>Int orderId for the new order.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol,System.Int32,System.Decimal,System.Decimal,System.String)">
            <summary>
            Send a stop limit order to the transaction handler:
            </summary>
            <param name="symbol">String symbol for the asset</param>
            <param name="quantity">Quantity of shares for limit order</param>
            <param name="stopPrice">Stop price for this order</param>
            <param name="limitPrice">Limit price to fill this order</param>
            <param name="tag">String tag for the order (optional)</param>
            <returns>Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol,System.Double,System.Decimal,System.Decimal,System.String)">
            <summary>
            Send a stop limit order to the transaction handler:
            </summary>
            <param name="symbol">String symbol for the asset</param>
            <param name="quantity">Quantity of shares for limit order</param>
            <param name="stopPrice">Stop price for this order</param>
            <param name="limitPrice">Limit price to fill this order</param>
            <param name="tag">String tag for the order (optional)</param>
            <returns>Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.StopLimitOrder(QuantConnect.Symbol,System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            Send a stop limit order to the transaction handler:
            </summary>
            <param name="symbol">String symbol for the asset</param>
            <param name="quantity">Quantity of shares for limit order</param>
            <param name="stopPrice">Stop price for this order</param>
            <param name="limitPrice">Limit price to fill this order</param>
            <param name="tag">String tag for the order (optional)</param>
            <returns>Order id</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ExerciseOption(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)">
            <summary>
            Send an exercise order to the transaction handler
            </summary>
            <param name="optionSymbol">String symbol for the option position</param>
            <param name="quantity">Quantity of options contracts</param>
            <param name="asynchronous">Send the order asynchronously (false). Otherwise we'll block until it fills</param>
            <param name="tag">String tag for the order (optional)</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Buy(QuantConnect.Securities.Option.OptionStrategy,System.Int32)">
            <summary>
            Buy Option Strategy (Alias of Order)
            </summary>
            <param name="strategy">Specification of the strategy to trade</param>
            <param name="quantity">Quantity of the strategy to trade</param>
            <returns>Sequence of order ids</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Sell(QuantConnect.Securities.Option.OptionStrategy,System.Int32)">
            <summary>
            Sell Option Strategy (alias of Order)
            </summary>
            <param name="strategy">Specification of the strategy to trade</param>
            <param name="quantity">Quantity of the strategy to trade</param>
            <returns>Sequence of order ids</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Securities.Option.OptionStrategy,System.Int32)">
            <summary>
             Issue an order/trade for buying/selling an option strategy
            </summary>
            <param name="strategy">Specification of the strategy to trade</param>
            <param name="quantity">Quantity of the strategy to trade</param>
            <returns>Sequence of order ids</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PreOrderChecks(QuantConnect.Orders.SubmitOrderRequest)">
            <summary>
            Perform pre-order checks to ensure we have sufficient capital,
            the market is open, and we haven't exceeded maximum realistic orders per day.
            </summary>
            <returns>OrderResponse. If no error, order request is submitted.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.PreOrderChecksImpl(QuantConnect.Orders.SubmitOrderRequest)">
            <summary>
            Perform pre-order checks to ensure we have sufficient capital,
            the market is open, and we haven't exceeded maximum realistic orders per day.
            </summary>
            <returns>OrderResponse. If no error, order request is submitted.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Liquidate(QuantConnect.Symbol,System.String)">
            <summary>
            Liquidate all holdings and cancel open orders. Called at the end of day for tick-strategies.
            </summary>
            <param name="symbolToLiquidate">Symbols we wish to liquidate</param>
            <param name="tag">Custom tag to know who is calling this.</param>
            <returns>Array of order ids for liquidated symbols</returns>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetMaximumOrders(System.Int32)">
            <summary>
            Maximum number of orders for the algorithm
            </summary>
            <param name="max"></param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetHoldings(System.Collections.Generic.List{QuantConnect.Algorithm.Framework.Portfolio.PortfolioTarget},System.Boolean)">
            <summary>
            Sets holdings for a collection of targets.
            The implementation will order the provided targets executing first those that
            reduce a position, freeing margin.
            </summary>
            <param name="targets">The portfolio desired quantities as percentages</param>
            <param name="liquidateExistingHoldings">True will liquidate existing holdings</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol,System.Double,System.Boolean)">
            <summary>
            Alias for SetHoldings to avoid the M-decimal errors.
            </summary>
            <param name="symbol">string symbol we wish to hold</param>
            <param name="percentage">double percentage of holdings desired</param>
            <param name="liquidateExistingHoldings">liquidate existing holdings if necessary to hold this stock</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol,System.Single,System.Boolean,System.String)">
            <summary>
            Alias for SetHoldings to avoid the M-decimal errors.
            </summary>
            <param name="symbol">string symbol we wish to hold</param>
            <param name="percentage">float percentage of holdings desired</param>
            <param name="liquidateExistingHoldings">bool liquidate existing holdings if necessary to hold this stock</param>
            <param name="tag">Tag the order with a short string.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol,System.Int32,System.Boolean,System.String)">
            <summary>
            Alias for SetHoldings to avoid the M-decimal errors.
            </summary>
            <param name="symbol">string symbol we wish to hold</param>
            <param name="percentage">float percentage of holdings desired</param>
            <param name="liquidateExistingHoldings">bool liquidate existing holdings if necessary to hold this stock</param>
            <param name="tag">Tag the order with a short string.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetHoldings(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)">
            <summary>
            Automatically place a market order which will set the holdings to between 100% or -100% of *PORTFOLIO VALUE*.
            E.g. SetHoldings("AAPL", 0.1); SetHoldings("IBM", -0.2); -> Sets portfolio as long 10% APPL and short 20% IBM
            E.g. SetHoldings("AAPL", 2); -> Sets apple to 2x leveraged with all our cash.
            If the market is closed, place a market on open order.
            </summary>
            <param name="symbol">Symbol indexer</param>
            <param name="percentage">decimal fraction of portfolio to set stock</param>
            <param name="liquidateExistingHoldings">bool flag to clean all existing holdings before setting new faction.</param>
            <param name="tag">Tag the order with a short string.</param>
            <seealso cref="M:QuantConnect.Algorithm.QCAlgorithm.MarketOrder(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)"/>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.SetHoldingsImpl(QuantConnect.Symbol,System.Decimal,System.Boolean,System.String)">
            <summary>
            Set holdings implementation, which uses order quantities (delta) not percentage nor target final quantity
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol,System.Double)">
            <summary>
            Calculate the order quantity to achieve target-percent holdings.
            </summary>
            <param name="symbol">Security object we're asking for</param>
            <param name="target">Target percentage holdings</param>
            <returns>Order quantity to achieve this percentage</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.CalculateOrderQuantity(QuantConnect.Symbol,System.Decimal)">
            <summary>
            Calculate the order quantity to achieve target-percent holdings.
            </summary>
            <param name="symbol">Security object we're asking for</param>
            <param name="target">Target percentage holdings, this is an unleveraged value, so
            if you have 2x leverage and request 100% holdings, it will utilize half of the
            available margin</param>
            <returns>Order quantity to achieve this percentage</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Int32,QuantConnect.Orders.OrderType,System.Boolean,System.String)">
            <summary>
            Obsolete implementation of Order method accepting a OrderType. This was deprecated since it
            was impossible to generate other orders via this method. Any calls to this method will always default to a Market Order.
            </summary>
            <param name="symbol">Symbol we want to purchase</param>
            <param name="quantity">Quantity to buy, + is long, - short.</param>
            <param name="type">Order Type</param>
            <param name="asynchronous">Don't wait for the response, just submit order and move on.</param>
            <param name="tag">Custom data for this order</param>
            <returns>Integer Order ID.</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Decimal,QuantConnect.Orders.OrderType)">
            <summary>
            Obsolete method for placing orders.
            </summary>
            <param name="symbol"></param>
            <param name="quantity"></param>
            <param name="type"></param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.Order(QuantConnect.Symbol,System.Int32,QuantConnect.Orders.OrderType)">
            <summary>
            Obsolete method for placing orders.
            </summary>
            <param name="symbol"></param>
            <param name="quantity"></param>
            <param name="type"></param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.IsMarketOpen(QuantConnect.Symbol)">
            <summary>
            Determines if the exchange for the specified symbol is open at the current time.
            </summary>
            <param name="symbol">The symbol</param>
            <returns>True if the exchange is considered open at the current time, false otherwise</returns>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.UniverseManager">
            <summary>
            Gets universe manager which holds universes keyed by their symbol
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings">
            <summary>
            Gets the universe settings to be used when adding securities via universe selection
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfTimeStep">
            <summary>
            Invoked at the end of every time step. This allows the algorithm
            to process events before advancing to the next time step.
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.QCAlgorithm.Universe">
            <summary>
            Gets a helper that provides pre-defined universe definitions, such as top dollar volume
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(QuantConnect.Data.UniverseSelection.Universe)">
            <summary>
            Adds the universe to the algorithm
            </summary>
            <param name="universe">The universe to be added</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Resolution.Daily, Market.USA, and UniverseSettings
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Resolution.Daily, Market.USA, and UniverseSettings
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Resolution.Daily, and Market.USA
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="universeSettings">The settings used for securities added by this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Resolution.Daily, and Market.USA
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="universeSettings">The settings used for securities added by this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Resolution,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Market.USA and UniverseSettings
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Resolution,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, Market.USA and UniverseSettings
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Resolution,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, and Market.USA
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="universeSettings">The settings used for securities added by this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(System.String,QuantConnect.Resolution,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property. This universe will use the defaults
            of SecurityType.Equity, and Market.USA
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="universeSettings">The settings used for securities added by this universe</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property.
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="securityType">The security type the universe produces</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="market">The market for selected symbols</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This will use the default universe settings
            specified via the <see cref="P:QuantConnect.Algorithm.QCAlgorithm.UniverseSettings"/> property.
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="securityType">The security type the universe produces</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="market">The market for selected symbols</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="securityType">The security type the universe produces</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="market">The market for selected symbols</param>
            <param name="universeSettings">The subscription settings to use for newly created subscriptions</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse``1(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="securityType">The security type the universe produces</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The epected resolution of the universe data</param>
            <param name="market">The market for selected symbols</param>
            <param name="universeSettings">The subscription settings to use for newly created subscriptions</param>
            <param name="selector">Function delegate that performs selection on the universe data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(System.Func{System.Collections.Generic.IEnumerable{QuantConnect.Data.UniverseSelection.CoarseFundamental},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This is for coarse fundamental US Equity data and
            will be executed on day changes in the NewYork time zone (<see cref="F:QuantConnect.TimeZones.NewYork"/>
            </summary>
            <param name="selector">Defines an initial coarse selection</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(System.Func{System.Collections.Generic.IEnumerable{QuantConnect.Data.UniverseSelection.CoarseFundamental},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}},System.Func{System.Collections.Generic.IEnumerable{QuantConnect.Data.Fundamental.FineFundamental},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This is for coarse and fine fundamental US Equity data and
            will be executed on day changes in the NewYork time zone (<see cref="F:QuantConnect.TimeZones.NewYork"/>
            </summary>
            <param name="coarseSelector">Defines an initial coarse selection</param>
            <param name="fineSelector">Defines a more detailed selection with access to more data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(QuantConnect.Data.UniverseSelection.Universe,System.Func{System.Collections.Generic.IEnumerable{QuantConnect.Data.Fundamental.FineFundamental},System.Collections.Generic.IEnumerable{QuantConnect.Symbol}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This is for fine fundamental US Equity data and
            will be executed on day changes in the NewYork time zone (<see cref="F:QuantConnect.TimeZones.NewYork"/>
            </summary>
            <param name="universe">The universe to be filtered with fine fundamental selection</param>
            <param name="fineSelector">Defines a more detailed selection with access to more data</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(System.String,System.Func{System.DateTime,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This can be used to return a list of string
            symbols retrieved from anywhere and will loads those symbols under the US Equity market.
            </summary>
            <param name="name">A unique name for this universe</param>
            <param name="selector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(System.String,QuantConnect.Resolution,System.Func{System.DateTime,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new universe and adds it to the algorithm. This can be used to return a list of string
            symbols retrieved from anywhere and will loads those symbols under the US Equity market.
            </summary>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The resolution this universe should be triggered on</param>
            <param name="selector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverse(QuantConnect.SecurityType,System.String,QuantConnect.Resolution,System.String,QuantConnect.Data.UniverseSelection.UniverseSettings,System.Func{System.DateTime,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Creates a new user defined universe that will fire on the requested resolution during market hours.
            </summary>
            <param name="securityType">The security type of the universe</param>
            <param name="name">A unique name for this universe</param>
            <param name="resolution">The resolution this universe should be triggered on</param>
            <param name="market">The market of the universe</param>
            <param name="universeSettings">The subscription settings used for securities added from this universe</param>
            <param name="selector">Function delegate that accepts a DateTime and returns a collection of string symbols</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverseOptions(QuantConnect.Symbol,System.Func{QuantConnect.Securities.OptionFilterUniverse,QuantConnect.Securities.OptionFilterUniverse})">
            <summary>
            Adds a new universe that creates options of the security by monitoring any changes in the Universe the provided security is in.
            Additionally, a filter can be applied to the options generated when the universe of the security changes.
            </summary>
            <param name="underlyingSymbol">Underlying Symbol to add as an option. For Futures, the option chain constructed will be per-contract, as long as a canonical Symbol is provided.</param>
            <param name="optionFilter">User-defined filter used to select the options we want out of the option chain provided.</param>
            <exception cref="T:System.InvalidOperationException">The underlying Symbol's universe is not found.</exception>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddUniverseOptions(QuantConnect.Data.UniverseSelection.Universe,System.Func{QuantConnect.Securities.OptionFilterUniverse,QuantConnect.Securities.OptionFilterUniverse})">
            <summary>
            Creates a new universe selection model and adds it to the algorithm. This universe selection model will chain to the security
            changes of a given <see cref="P:QuantConnect.Algorithm.QCAlgorithm.Universe"/> selection output and create a new <see cref="T:QuantConnect.Data.UniverseSelection.OptionChainUniverse"/> for each of them
            </summary>
            <param name="universe">The universe we want to chain an option universe selection model too</param>
            <param name="optionFilter">The option filter universe to use</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.AddToUserDefinedUniverse(QuantConnect.Securities.Security,System.Collections.Generic.List{QuantConnect.Data.SubscriptionDataConfig})">
            <summary>
            Adds the security to the user defined universe
            </summary>
            <param name="security">The security to add</param>
            <param name="configurations">The <see cref="T:QuantConnect.Data.SubscriptionDataConfig"/> instances we want to add</param>
        </member>
        <member name="M:QuantConnect.Algorithm.QCAlgorithm.ConfigureUnderlyingSecurity(QuantConnect.Securities.Security)">
            <summary>
            Configures the security to be in raw data mode and ensures that a reasonable default volatility model is supplied
            </summary>
            <param name="security">The underlying security</param>
        </member>
        <member name="T:QuantConnect.Algorithm.QCAlgorithm.UserDefinedUniverseAddition">
            <summary>
            Helper class used to store <see cref="T:QuantConnect.Data.UniverseSelection.UserDefinedUniverse"/> additions.
            They will be consumed at <see cref="M:QuantConnect.Algorithm.QCAlgorithm.OnEndOfTimeStep"/>
            </summary>
        </member>
        <member name="T:QuantConnect.Algorithm.Selection.OptionChainedUniverseSelectionModel">
            <summary>
            This universe selection model will chain to the security changes of a given <see cref="T:QuantConnect.Data.UniverseSelection.Universe"/> selection
            output and create a new <see cref="T:QuantConnect.Data.UniverseSelection.OptionChainUniverse"/> for each of them
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Selection.OptionChainedUniverseSelectionModel.GetNextRefreshTimeUtc">
            <summary>
            Gets the next time the framework should invoke the `CreateUniverses` method to refresh the set of universes.
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Selection.OptionChainedUniverseSelectionModel.#ctor(QuantConnect.Data.UniverseSelection.Universe,System.Func{QuantConnect.Securities.OptionFilterUniverse,QuantConnect.Securities.OptionFilterUniverse},QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Creates a new instance of <see cref="T:QuantConnect.Algorithm.Selection.OptionChainedUniverseSelectionModel"/>
            </summary>
            <param name="universe">The universe we want to chain to</param>
            <param name="optionFilter">The option filter universe to use</param>
            <param name="universeSettings">Universe settings define attributes of created subscriptions, such as their resolution and the minimum time in universe before they can be removed</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Selection.OptionChainedUniverseSelectionModel.CreateUniverses(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Creates the universes for this algorithm. Called once after <see cref="M:QuantConnect.Interfaces.IAlgorithm.Initialize"/>
            </summary>
            <param name="algorithm">The algorithm instance to create universes for</param>
            <returns>The universes to be used by the algorithm</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.Selection.OptionContractUniverse">
            <summary>
            This universe will hold single option contracts and their underlying, managing removals and additions
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.Selection.OptionContractUniverse.#ctor(QuantConnect.Data.SubscriptionDataConfig,QuantConnect.Data.UniverseSelection.UniverseSettings)">
            <summary>
            Creates a new empty instance
            </summary>
            <param name="configuration">The universe configuration to use</param>
            <param name="universeSettings">The universe settings to use</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Selection.OptionContractUniverse.SelectSymbols(System.DateTime,QuantConnect.Data.UniverseSelection.BaseDataCollection)">
            <summary>
            Returns the symbols defined by the user for this universe
            </summary>
            <param name="utcTime">The current utc time</param>
            <param name="data">The symbols to remain in the universe</param>
            <returns>The data that passes the filter</returns>
        </member>
        <member name="M:QuantConnect.Algorithm.Selection.OptionContractUniverse.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Event invocator for the <see cref="E:QuantConnect.Data.UniverseSelection.UserDefinedUniverse.CollectionChanged"/> event
            </summary>
            <param name="args">The notify collection changed event arguments</param>
        </member>
        <member name="M:QuantConnect.Algorithm.Selection.OptionContractUniverse.CreateSymbol(System.String,QuantConnect.SecurityType)">
            <summary>
            Creates a user defined universe symbol
            </summary>
            <param name="market">The market</param>
            <param name="securityType">The underlying option security type</param>
            <returns>A symbol for user defined universe of the specified security type and market</returns>
        </member>
        <member name="T:QuantConnect.Algorithm.UniverseDefinitions">
            <summary>
            Provides helpers for defining universes in algorithms
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.UniverseDefinitions.Unchanged">
            <summary>
            Specifies that universe selection should not make changes on this iteration
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.UniverseDefinitions.DollarVolume">
            <summary>
            Gets a helper that provides methods for creating universes based on daily dollar volumes
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.UniverseDefinitions.Index">
            <summary>
            Gets a helper that provides methods for creating universes based on index definitions
            </summary>
        </member>
        <member name="P:QuantConnect.Algorithm.UniverseDefinitions.Constituent">
            <summary>
            Gets a helper that provides methods for creating constituent universes
            </summary>
        </member>
        <member name="M:QuantConnect.Algorithm.UniverseDefinitions.#ctor(QuantConnect.Algorithm.QCAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Algorithm.UniverseDefinitions"/> class
            </summary>
            <param name="algorithm">The algorithm instance, used for obtaining the default <see cref="T:QuantConnect.Data.UniverseSelection.UniverseSettings"/></param>
        </member>
    </members>
</doc>
